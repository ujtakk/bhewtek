`timescale 1ns/1ps

module test_core();
`include "parameters.vh"

    /*AUTOREGINPUT*/

    /*AUTOWIRE*/

    //clock
    always
    begin
        clk = 0;
        #(STEP/2);
        clk = 1;
        #(STEP/2);
    end

    reg [DWIDTH-1:0] mem_in [2**INSIZE-1:0];
    <%- for i in 0..3 -%>
    integer fcnt<%=i%>;
    reg [DWIDTH-1:0] mem_w<%=i%> [2**WSIZE-1:0];
    <%- end -%>

    integer mem_input_cnt;
    integer mem_weight_cnt;
    integer fp;
    integer i;
    initial
    begin
        mem_input_cnt = 0;
        mem_weight_cnt = 0;
        <%- for i in 0..3 -%>
        fcnt<%=i%> = 0;
        <%- end -%>

        fp = $fopen("core_log.txt");
        //mem_clear;

        xrst = 0;
        input_addr = 0;
        write_input = 0;
        mem_input_we = 0;
        <%- for n in 0..3 -%>
        mem_weight_we<%=n%> = 0;
        weight_addr<%=n%> = 0;
        write_weight<%=n%> = 0;
        <%- end -%>
        #(STEP);
        xrst = 1;

        read_input_data;
        mem_input_we = 1;
        for (i=0;i<2**INSIZE;i=i+1)
        begin
            input_addr = i;
            write_input = mem_in[i];
            #(STEP);
        end
        mem_input_we = 0;
        input_addr = 0;

        read_weight;
        <%- for n in 0..3 -%>
        mem_weight_we<%=n%> = 1;
        for (i=0;i<2**WSIZE;i=i+1)
        begin
            weight_addr<%=n%> = i;
            write_weight<%=n%> = mem_w<%=n%>[i];
            #(STEP);
        end
        mem_weight_we<%=n%> = 0;
        weight_addr<%=n%> = 0;
        <%- end -%>

        //$toggle_start();
        //$vcdpluson;
        #(STEP);

        xrst = 0;
        req = 0;
        fil_h = 5;
        fil_w = 5;
        img_h = 12;
        img_w = 12;
        n_in = 20;
        n_out = 50;
        in_addr = 0;
        w_addr = 0;
        mem_input_we = 0;
        write_input = 0;
        <%- for i in 0..3 -%>
        mem_weight_we<%=i%> = 0;
        write_weight<%=i%> = 0;
        <%- end -%>

        #(STEP);

        xrst = 1;

        #(STEP*5);

        req = 1;

        #(STEP);

        req = 0;

        #(STEP*43950);
        //$toggle_stop();

        $display("input: %d     weight: %d", mem_input_cnt, mem_weight_cnt);
        $display("fcnt: %d %d %d %d", fcnt0, fcnt1, fcnt2, fcnt3);
        //$toggle_report("test_core.saif", "10ps", "core0");
        //$vcdplusoff;
        $finish();
    end

    reg pool_we_d1;

    always @(posedge clk)
        pool_we_d1 <= core0.pool_we0;

    always @(core0.mem_input_addr)
        mem_input_cnt = mem_input_cnt + 1;

    always @(core0.mem_weight_addr0)
        mem_weight_cnt = mem_weight_cnt + 1;

    always
    begin
        #(STEP/2-1);
        if (pool_we_d1)
            $display("%d: %d %d %d %d", $time/STEP, $signed(core0.pmap0), $signed(core0.pmap1), $signed(core0.pmap2), $signed(core0.pmap3));

        <%- for i in 0..3 -%>
        if (core0.mem_faccum_we<%=i%>)
            fcnt<%=i%> = fcnt<%=i%> + 1;
        <%- end -%>

        //<%- for i in 0..1 -%>
        //$fdisplay(fp,
        //    <%- x_max = i == 1 ? 1 : 7 -%>
        //    <%-   for j in 0..x_max -%>
        //    "%d ", $signed(core0.buf_feat0.r_pix<%=i%>_<%=j%>),
        //    <%- end -%>
        //);
        //<%- end -%>
        //if($time/STEP == 1630)
        //begin
        //    <%- for i in 0..4 -%>
        //    $display(
        //        <%-   for j in 0..4 -%>
        //        "%d ", $signed(core0.conv0.pixel<%=5*i+j%>),
        //        <%- end -%>
        //        "| ",
        //        <%-   for j in 0..4 -%>
        //        "%d ", $signed(core0.conv0.weight<%=5*i+j%>),
        //        <%- end -%>
        //    );
        //    <%- end -%>
        //end
        $fdisplay(fp,
            "%5d: ", $time/STEP,
            "%d ", xrst,
            "%d ", req,
            "%d ", $signed(core0.pmap0),
            "%d ", $signed(core0.pmap1),
            "%d ", $signed(core0.pmap2),
            "%d ", $signed(core0.pmap3),
            "%d ", ack,
            "%d ", core0.mem_output_we0,
            "%d ", core0.mem_output_addr0,
            "| ",
            "%d ", core0.mem_input_addr,
            "%d ", core0.input_addr,
            "%d ", core0.mem_weight_addr0,
            "%d ", core0.weight_addr0,
            "%d ", core0.wreg_we0,
            "%d ", core0.conv_we0,
            "%d ", core0.pool_we0,
            "| ",
            "%d ", core0.mem_faccum_we0,
            "%d ", core0.mem_faccum_rst0,
            "%d ", core0.mem_faccum_addr0,
            "%d ", core0.mem_faccum_addr0_d1,
            "%d ", $signed(core0.result0),
            "%d ", $signed(core0.read_faccum0),
            "%d ", $signed(core0.write_faccum0),
            //"-*- ",
            //"%4d ", $signed(core0.mem_faccum0.mem[0]),
            //"%4d ", $signed(core0.mem_faccum0.mem[1]),
            //"%4d ", $signed(core0.mem_faccum0.mem[2]),
            //"%4d ", $signed(core0.mem_faccum0.mem[3]),
            //"%4d ", $signed(core0.mem_faccum0.mem[4]),
            //"%4d ", $signed(core0.mem_faccum0.mem[5]),
            //"%4d ", $signed(core0.mem_faccum0.mem[6]),
            //"%4d ", $signed(core0.mem_faccum0.mem[7]),
            //"-*- ",
            "| ",
            "%d ", core0.ctrl.r_state,
            "%d ", core0.ctrl.r_c_in,
            "%d ", core0.ctrl.r_c_out,
            "| ",
            "%d ", core0.ctrl.r_w_x,
            "%d ", core0.ctrl.r_w_y,
            //"%d ", core0.ctrl.wreg_start,
            "%d ", core0.ctrl.wreg_valid,
            //"%d ", core0.ctrl.wreg_end,
            "; ",
            "%d ", core0.ctrl.r_x,
            "%d ", core0.ctrl.r_y,
            "%d ", core0.ctrl.conv_start,
            "%d ", core0.ctrl.conv_valid,
            "%d ", core0.ctrl.conv_end,
            "; ",
            "%d ", core0.ctrl.r_p_x,
            "%d ", core0.ctrl.r_p_y,
            //"%d ", core0.ctrl.pool_start,
            "%d ", core0.ctrl.pool_valid,
            //"%d ", core0.ctrl.pool_end,
            <%- for i in 0..3 -%>
            "%d ", $signed(core0.pixel_feat<%=i%>_0),
            <%- end -%>
        );
        #(STEP/2+1);
    end

    core core0(/*AUTOINST*/);

    //task mem_clear;
    //    integer i;
    //    begin
    //        for(i=0; i<2**FACCUM; i=i+1)
    //        begin
    //            <%- for i in 0..3 -%>
    //            core0.mem_faccum<%=i%>.mem[i] = 0;
    //            <%- end -%>
    //        end
    //    end
    //endtask

    task read_input_data;
        begin
            <%- num = 0 -%><%- file = 1 -%>
            <%- for i in 0..19 -%>
            $readmemb("/home/work/takau/lazy_core/data/bpmap1/<%=num%>/data<%=file%>_<%=i%>.bin", mem_in, <%=144*i%>, <%=144*(i+1)-1%>);
            <%- end -%>
        end
    endtask

    task read_weight;
        begin
            <%- for i in 0..11 -%>
            <%-   for j in 0..19 -%>
            <%-     for k in 0..3 -%>
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data<%=4*i+k%>_<%=j%>.bin", mem_w<%=k%>, <%=25*(20*i+j)%>, <%=25*(20*i+j+1)-1%>);
            <%-     end -%>
            <%-   end -%>
            <%- end -%>
            <%- for j in 0..19 -%>
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data48_<%=j%>.bin", mem_w0, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data49_<%=j%>.bin", mem_w1, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/null.bin", mem_w2, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/null.bin", mem_w3, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            <%- end -%>
        end
    endtask

    //task read_input;
    //    begin
    //        <%- num = 0 -%><%- file = 1 -%>
    //        <%- for i in 0..19 -%>
    //        $readmemb("/home/work/takau/lazy_core/data/bpmap1/<%=num%>/data<%=file%>_<%=i%>.bin", core0.mem_input.mem, <%=144*i%>, <%=144*(i+1)-1%>);
    //        <%- end -%>
    //    end
    //endtask

    //task read_weight;
    //    begin
    //        <%- for i in 0..11 -%>
    //        <%-   for j in 0..19 -%>
    //        <%-     for k in 0..3 -%>
    //        $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data<%=4*i+k%>_<%=j%>.bin", core0.mem_weight<%=k%>.mem, <%=25*(20*i+j)%>, <%=25*(20*i+j+1)-1%>);
    //        <%-     end -%>
    //        <%-   end -%>
    //        <%- end -%>
    //        <%- for j in 0..19 -%>
    //        $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data48_<%=j%>.bin", core0.mem_weight0.mem, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
    //        $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data49_<%=j%>.bin", core0.mem_weight1.mem, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
    //        $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/null.bin", core0.mem_weight2.mem, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
    //        $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/null.bin", core0.mem_weight3.mem, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
    //        <%- end -%>
    //    end
    //endtask
    //
endmodule
