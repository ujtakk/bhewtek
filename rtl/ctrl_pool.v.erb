module ctrl_pool(/*AUTOARG*/);
`include "parameters.vh"
<%- load "parameters.rb" -%>

  parameter S_WAIT        = 'd0;
  parameter S_ACTIVE      = 'd1;

  /*AUTOINPUT*/
  input               clk;
  input               xrst;
  input               in_begin;
  input               in_valid;
  input               in_end;
  input [LWIDTH-1:0]  fea_size;
  input [LWIDTH-1:0]  pool_size;

  /*AUTOOUTPUT*/
  output out_begin;
  output out_valid;
  output out_end;

  /*AUTOWIRE*/
  wire pool_begin;
  wire pool_valid;
  wire pool_end;

  /*AUTOREG*/
  reg               r_state;
  reg               r_in_valid;
  reg [LWIDTH-1:0]  r_fea_size;
  reg [LWIDTH-1:0]  r_pool_size;
  <%- for i in 0..$d_poolbuf -%>
  reg [LWIDTH-1:0]  r_pool_x_d<%=i%>;
  reg [LWIDTH-1:0]  r_pool_y_d<%=i%>;
  reg [LWIDTH-1:0]  r_pool_exec_x_d<%=i%>;
  reg [LWIDTH-1:0]  r_pool_exec_y_d<%=i%>;
  <%- end -%>
  <%- for i in 0..$d_pool -%>
  reg               r_out_begin_d<%=i%>;
  reg               r_out_valid_d<%=i%>;
  reg               r_out_end_d<%=i%>;
  <%- end -%>

//==========================================================
// main FSM
//==========================================================

  always @(posedge clk)
    if (!xrst)
      r_state <= S_WAIT;
    else
      case (r_state)
        S_WAIT:
          if (in_begin)
            r_state <= S_ACTIVE;
        S_ACTIVE:
          if (out_end)
            r_state <= S_WAIT;
      endcase

  always @(posedge clk)
    if (!xrst)
    begin
      r_fea_size  <= 0;
      r_pool_size <= 0;
    end
    else if (in_begin && r_state == S_WAIT)
    begin
      r_fea_size  <= fea_size;
      r_pool_size <= pool_size;
    end

  always @(posedge clk)
    if (!xrst)
      r_in_valid  <= 0;
    else
      r_in_valid  <= in_valid;

  <%- for i in 0..$d_poolbuf -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_pool_x_d0 <= 0;
    else if (r_state == S_WAIT)
      r_pool_x_d0 <= 0;
    else if (r_state == S_ACTIVE && r_in_valid)
      if (r_pool_x_d0 == r_fea_size - 1)
        r_pool_x_d0 <= 0;
      else
        r_pool_x_d0 <= r_pool_x_d0 + 1;
    <%- else -%>
    if (!xrst)
      r_pool_x_d<%=i%> <= 0;
    else
      r_pool_x_d<%=i%> <= r_pool_x_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

  <%- for i in 0..$d_poolbuf -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_pool_y_d0 <= 0;
    else if (r_state == S_WAIT)
      r_pool_y_d0 <= 0;
    else if (r_state == S_ACTIVE && r_in_valid && r_pool_x_d0 == r_fea_size - 1)
      if (r_pool_y_d0 == r_fea_size - 1)
        r_pool_y_d0 <= 0;
      else
        r_pool_y_d0 <= r_pool_y_d0 + 1;
    <%- else -%>
    if (!xrst)
      r_pool_y_d<%=i%> <= 0;
    else
      r_pool_y_d<%=i%> <= r_pool_y_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

//==========================================================
// output control
//==========================================================

  assign pool_begin = (r_state == S_ACTIVE)
                        && r_pool_x_d<%=$d_poolbuf%> == r_pool_size - 1
                        && r_pool_y_d<%=$d_poolbuf%> == r_pool_size - 1;

  assign pool_valid = (r_state == S_ACTIVE)
                        && r_pool_exec_x_d<%=$d_poolbuf%> == r_pool_size - 1
                        && r_pool_exec_y_d<%=$d_poolbuf%> == r_pool_size - 1;

  assign pool_end   = (r_state == S_ACTIVE)
                        && r_pool_x_d<%=$d_poolbuf%> == r_fea_size - 1
                        && r_pool_y_d<%=$d_poolbuf%> == r_fea_size - 1;

  assign out_begin  = r_out_begin_d<%=$d_pool%>;
  assign out_valid  = r_out_valid_d<%=$d_pool%>;
  assign out_end    = r_out_end_d<%=$d_pool%>;

  <%- for i in 0..$d_poolbuf -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_pool_exec_x_d0 <= 0;
    else if (r_state == S_WAIT)
      r_pool_exec_x_d0 <= 0;
    else if (r_state == S_ACTIVE && r_in_valid)
      if (r_pool_exec_x_d0 == r_pool_size - 1)
        r_pool_exec_x_d0 <= 0;
      else
        r_pool_exec_x_d0 <= r_pool_exec_x_d0 + 1;
    <%- else -%>
    if (!xrst)
      r_pool_exec_x_d<%=i%> <= 0;
    else
      r_pool_exec_x_d<%=i%> <= r_pool_exec_x_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

  <%- for i in 0..$d_poolbuf -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_pool_exec_y_d0 <= 0;
    else if (r_state == S_WAIT)
      r_pool_exec_y_d0 <= 0;
    else if (r_state == S_ACTIVE && r_in_valid && r_pool_x_d0 == r_fea_size - 1)
      if (r_pool_exec_y_d0 == r_pool_size - 1)
        r_pool_exec_y_d0 <= 0;
      else
        r_pool_exec_y_d0 <= r_pool_exec_y_d0 + 1;
    <%- else -%>
    if (!xrst)
      r_pool_exec_y_d<%=i%> <= 0;
    else
      r_pool_exec_y_d<%=i%> <= r_pool_exec_y_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

  <%- for n in ["begin", "valid", "end"] -%>
  <%-   for i in 0...$d_pool+1 -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (pool_<%=n%>)
      r_out_<%=n%>_d0 <= 1;
    else
      r_out_<%=n%>_d0 <= 0;
    <%- else -%>
    if (!xrst)
      r_out_<%=n%>_d<%=i%> <= 0;
    else
      r_out_<%=n%>_d<%=i%> <= r_out_<%=n%>_d<%=i-1%>;
    <%- end -%>
  <%-   end -%>
  <%- end -%>

endmodule
