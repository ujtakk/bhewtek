`timescale 1ns/1ps

module test_top();
`include "parameters.vh"
<%- load "parameters.rb" -%>

    /*AUTOREGINPUT*/

    /*AUTOWIRE*/

    //clock
    always
    begin
        clk = 0;
        #(STEP/2);
        clk = 1;
        #(STEP/2);
    end

    reg [DWIDTH-1:0] mem_in [2**INSIZE-1:0];
    <%- for i in 0..$core-1 -%>
    integer fcnt<%=i%>;
    reg [DWIDTH-1:0] mem_w<%=i%> [2**WSIZE-1:0];
    <%- end -%>

    integer mem_input_cnt;
    integer mem_weight_cnt;
    integer fp;
    integer i;
    initial
    begin
        mem_input_cnt = 0;
        mem_weight_cnt = 0;
        <%- for i in 0..$core-1 -%>
        fcnt<%=i%> = 0;
        <%- end -%>

        fp = $fopen("top_log.txt");

        xrst = 0;
        input_addr = 0;
        write_input = 0;
        mem_input_we = 0;
        <%- for n in 0..$core-1 -%>
        mem_weight_we<%=n%> = 0;
        weight_addr<%=n%> = 0;
        write_weight<%=n%> = 0;
        <%- end -%>
        #(STEP);
        xrst = 1;

        read_input;
        mem_input_we = 1;
        for (i=0;i<2**INSIZE;i=i+1)
        begin
            input_addr = i;
            write_input = mem_in[i];
            #(STEP);
        end
        mem_input_we = 0;
        input_addr = 0;

        read_weight;
        <%- for n in 0..$core-1 -%>
        mem_weight_we<%=n%> = 1;
        for (i=0;i<2**WSIZE;i=i+1)
        begin
            weight_addr<%=n%> = i;
            write_weight<%=n%> = mem_w<%=n%>[i];
            #(STEP);
        end
        mem_weight_we<%=n%> = 0;
        weight_addr<%=n%> = 0;
        <%- end -%>

        //$toggle_start();
        #(STEP);

        xrst = 0;
        req = 0;
        fil_h = FSIZE;
        fil_w = FSIZE;
        img_h = INSIZE;
        img_w = INSIZE;
        n_in = N_F1;
        n_out = N_F2;
        in_addr = 0;
        w_addr = 0;
        mem_input_we = 0;
        write_input = 0;
        <%- for i in 0..$core-1 -%>
        mem_weight_we<%=i%> = 0;
        write_weight<%=i%> = 0;
        <%- end -%>

        #(STEP);

        xrst = 1;

        #(STEP*5);

        req = 1;

        #(STEP);

        req = 0;

        #(STEP*43950);
        //$toggle_stop();

        $display("input: %d     weight: %d", mem_input_cnt, mem_weight_cnt);
        $display("fcnt: %d %d %d %d", fcnt0, fcnt1, fcnt2, fcnt3);
        //$toggle_report("test_core.saif", "10ps", "dut0");
        $finish();
    end

    reg pool_we_d1;

    always @(posedge clk)
        pool_we_d1 <= dut0.pool_we0;

    always @(dut0.mem_input_addr)
        mem_input_cnt = mem_input_cnt + 1;

    always @(dut0.mem_weight_addr0)
        mem_weight_cnt = mem_weight_cnt + 1;

    always
    begin
        #(STEP/2-1);
        if (pool_we_d1)
            $display("%d: %d %d %d %d", $time/STEP, $signed(dut0.pmap0), $signed(dut0.pmap1), $signed(dut0.pmap2), $signed(dut0.pmap3));

        <%- for i in 0..$core-1 -%>
        if (dut0.mem_feat_we<%=i%>)
            fcnt<%=i%> = fcnt<%=i%> + 1;
        <%- end -%>

        $fdisplay(fp,
            "%5d: ", $time/STEP,
            "%d ", xrst,
            "%d ", req,
            "%d ", ack,
            "| ",
            "%d ", dut0.ctrl.r_state,
            "%d ", dut0.ctrl.r_count_in,
            "%d ", dut0.ctrl.r_count_out,
            "| ",
            "%d ", dut0.ctrl.r_wreg_x,
            "%d ", dut0.ctrl.r_wreg_y,
            "%d ", dut0.ctrl.wreg_valid,
            "; ",
            "%d ", dut0.ctrl.r_conv_x,
            "%d ", dut0.ctrl.r_conv_y,
            "%d ", dut0.ctrl.conv_valid,
            "; ",
            "%d ", dut0.ctrl.r_pool_x,
            "%d ", dut0.ctrl.r_pool_y,
            "%d ", dut0.ctrl.pool_valid,
            "| ",
            "%d ", dut0.mem_feat_we0,
            "%d ", dut0.mem_feat_addr0,
            "%4d ", $signed(dut0.core0.result),
            "%4d ", $signed(dut0.core0.read_feat),
            "%4d ", $signed(dut0.core0.write_feat),
            "| ",
            <%- for i in 0..3 -%>
            "%4d ", $signed(dut0.core0.pixel_feat<%=i%>),
            <%- end -%>
            "| ",
            "%4d ", $signed(dut0.pmap0),
            "%d ", dut0.mem_output_we0,
        );
        #(STEP/2+1);
    end

    top dut0(/*AUTOINST*/);

    task read_input;
        begin
            <%- num = 0 -%><%- file = 1 -%>
            <%- for i in 0..$n_f1 -%>
            $readmemb("/home/work/takau/lazy_core/data/bpmap1/<%=num%>/data<%=file%>_<%=i%>.bin", mem_in, <%=($insize**2)*i%>, <%=($insize**2)*(i+1)-1%>);
            <%- end -%>
        end
    endtask

    task read_weight;
        begin
            <%- for i in 0..$insize-1 -%>
            <%-   for j in 0..$n_f1-1 -%>
            <%-     for k in 0..$core-1 -%>
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data<%=4*i+k%>_<%=j%>.bin", mem_w<%=k%>, <%=25*(20*i+j)%>, <%=25*(20*i+j+1)-1%>);
            <%-     end -%>
            <%-   end -%>
            <%- end -%>
            <%- for j in 0..$n_f1 -%>
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data48_<%=j%>.bin", mem_w0, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data49_<%=j%>.bin", mem_w1, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/null.bin", mem_w2, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/null.bin", mem_w3, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            <%- end -%>
        end
    endtask

endmodule
