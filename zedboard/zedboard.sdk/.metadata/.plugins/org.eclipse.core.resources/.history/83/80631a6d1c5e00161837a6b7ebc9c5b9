#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <limits.h>
#include <unistd.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"

#include "cnn.h"
#include "pmap1_flat.h"
//#include "pmap2_flat.h"
#include "w_conv2_flat.h"
#include "b_conv2.h"
#include "w_hidden.h"
#include "b_hidden.h"
#include "w_output.h"
#include "b_output.h"

/*
 * TODO: We use stupid loading method (array initialization for specific data)
 *     for temporal working.
 * TODO: Therefore, high dimentional load functions are not implemented.
 */
void load_images(s16 ***image_map,
         const int i1, const int i2, const int i3)
{
}

void load_images_flat(s16 *image_map,
         const int i1, const int i2, const int i3)
{
}

void load_weight(s16 **weight_matrix,
         const int i1, const int i2)
{
}

void load_weight_flat(s16 *weight_matrix,
         const int i1, const int i2, const int i3, const int i4)
{
}

void load_bias(s16 *bias_vector,
         const int i1)
{
}

// TODO: Give the address of two dim. array To two dim. pointer
//       (Dont want to implement as dynamic array)
//        => flat the array
void full_connect(s16 *input, s16 *output, s16 *weight,
          s16 *bias, const int ilen, const int olen)
{
  int i,j;
  int base = 0;
  s32 pro;
  s16 sum=0;
  for (i=0; i<olen; i++) {
    for (j=0; j<ilen; j++) {
      pro = input[j] * weight[base+j] / (int)pow(2,8);
      sum += (s16)pro;
    }

    output[i] = sum + bias[i];
    sum=0;
    base += ilen;
  }
}

void activate_1d(s16 *input,const int ilen){
  int i;
  for (i=0; i<ilen ;i++) {
    if (input[i] < 0) {
      input[i] = 0;
    }
  }
}

int softmax(double *output,int len)
{
  int i;
  double expsum=0.0;

  for (i=0; i<len; i++) {
    expsum += exp(output[i]);
  }

  if (expsum == 0) {
    return 1;
  } else {
    for (i=0; i<len; i++)
      output[i] = exp(output[i])/expsum;

    return 0;
  }
}

u32 concat8_32(u8 data0, u8 data1, u8 data2, u8 data3)
{
  u32 total = (data0 << 24) | (data1 << 16) | (data2 << 8) | data3;

  return total;
}

u32 concat16_32(u16 upper, u16 lower)
{
  u32 total = (upper << 16) | lower;

  return total;
}

u32 concat32_64(u16 upper, u16 lower)
{
  u32 total = (upper << 16) | lower;

  return total;
}

void print_port()
{
  int port[16];

  port[0]  = Xil_In32(reg_req);
  port[1]  = Xil_In32(reg_output_re);
  port[2]  = Xil_In32(reg_weight_we);
  port[3]  = Xil_In32(reg_input_we);
  port[4]  = Xil_In32(reg_total_out);
  port[5]  = Xil_In32(reg_total_in);
  port[6]  = Xil_In32(reg_img_size);
  port[7]  = Xil_In32(reg_fil_size);
  port[8]  = Xil_In32(reg_input_addr);
  port[9]  = Xil_In32(reg_write_input);
  port[10] = Xil_In32(reg_weight_addr);
  port[11] = Xil_In32(reg_write_weight);
  port[12] = Xil_In32(reg_output_addr);
  port[13] = Xil_In32(reg_read_output);
  port[14] = Xil_In32(reg_probe);
  port[15] = Xil_In32(reg_ack);

  //printf("%04x : %3x : %8x : %8x : %8x : %4x : %8x a: %1x\n",
  //if (port[14] != 0x10000)
  xil_printf("%x : %x : %x : %x : %x : %x : %x : %x : %x : %x : %x : %x : %x @@ %x : %x : %x\n\r",
      port[0], port[1], port[2], port[3], port[4], port[5], port[6], port[7], port[8], port[9], port[10], port[11], port[12], port[13], port[14], port[15]);
  //usleep(1000);
}

void post_input (s16 *input)
{
  int i;
  const int in_size  = N_F1 * PM1HEI * PM1WID;

  for (i=0; i<in_size; i++) {
    Xil_Out32(reg_write_input, input[i]);
    Xil_Out32(reg_input_addr, i);
    Xil_Out32(reg_input_we, 0x1);
    Xil_Out32(reg_input_we, 0x0);
    if (Xil_In32(reg_probe) != input[i]) printf("Fail: %d\n", i);
  }
}

void post_weight (s16 *weight)
{
  int i;
  int w_mem_addr, core_num;
  const int w_unit   = N_F1 * FHEI * FWID;
  const int w_size   = N_F2 * w_unit;

  for (i=0; i<w_size; i++) {
    if (i % w_unit == 0)
      core_num = (i / w_unit) % CORE + 1;
    w_mem_addr = (i / (8*w_unit))*w_unit + i % w_unit;

    Xil_Out32(reg_weight_addr, w_mem_addr);
    Xil_Out32(reg_write_weight, weight[i]);
    Xil_Out32(reg_weight_we, core_num);
    Xil_Out32(reg_weight_we, 0x0);
  }
}

void post_parameter (void)
{
  Xil_Out32(reg_total_out, N_F2);
  Xil_Out32(reg_total_in, N_F1);
  Xil_Out32(reg_img_size, PM1HEI);
  Xil_Out32(reg_fil_size, FSIZE);
}

void post_data (s16 *input, s16 *weight)
{
  post_input(input);
  post_weight(weight);
  post_parameter();
}

void exec_core ()
{
  int ack;

  probe();
  Xil_Out32(reg_req, 0x1);
  Xil_Out32(reg_req, 0x0);
  probe();
  do {} while (!Xil_In32(reg_ack));
  print_port();
}

void get_data(s16 *output)
{
  //TODO: split the address of each core.
  const int o_size = N_F2 * PM2HEI * PM2WID;
  const int o_unit = PM2HEI * PM2WID;

  int i;
  int o_offset, o_index;
  int o_mem_addr;
  int core_num, data;

  for (i=0; i<o_size; i++) {
    o_offset = i % o_unit;
    o_index  = i / o_unit;
    if (o_offset == 0)
      core_num = (o_index % CORE + 1);
    o_mem_addr = o_offset + o_unit * (o_index / CORE);

    Xil_Out32(reg_output_addr, o_mem_addr);
    Xil_Out32(reg_output_re, core_num);
    data = Xil_In32(reg_read_output);
    Xil_Out32(reg_output_re, 0x0);

    output[i] = data;
  }
}

void print_result(s16 *output)
{
  int i;
  int number = -1;
  int temp = INT_MIN;

  for (i=0; i<LABEL; i++) {
    xil_printf("%d\n\r",output[i]);

    if (temp < output[i]) {
      temp = output[i];
      number = i;
    }
  }

  xil_printf("the answer is %d.\n\r", number);
}

void probe (void)
{
  int i;
  const int in_size  = N_F1 * PM1HEI * PM1WID;
  for (i=0; i<in_size; i++) {
    Xil_Out32(reg_input_addr, i);
    if (Xil_In32(reg_probe) != pmap1_flat[i]) printf("Fail: %d\n", i);
  }
  xil_printf("probe done\n\r");
}

void test_platform (void)
{
  AAAASD_Reg_SelfTest((int *)XPAR_AAAASD_0_S_AXI_BASEADDR);

  Xil_Out32(reg_req         , 0);
  Xil_Out32(reg_output_re   , 0);
  Xil_Out32(reg_weight_we   , 0);
  Xil_Out32(reg_input_we    , 0);
  Xil_Out32(reg_total_out   , 0);
  Xil_Out32(reg_total_in    , 0);
  Xil_Out32(reg_img_size    , 0);
  Xil_Out32(reg_fil_size    , 0);
  Xil_Out32(reg_input_addr  , 0);
  Xil_Out32(reg_write_input , 0);
  Xil_Out32(reg_weight_addr , 0);
  Xil_Out32(reg_write_weight, 0);
  Xil_Out32(reg_output_addr , 0);
  Xil_Out32(reg_read_output , 0);
  Xil_Out32(reg_probe       , 0);
  Xil_Out32(reg_ack         , 0);
}

int main (void)
{
  int i, j, k, l;
  //s16 pmap1[N_F1][PM1HEI][PM1WID];
  //s16 pmap2[N_F2][PM2HEI][PM2WID];
  //s16 w_conv2[N_F2][N_F1][FHEI][FWID];
  s16 pmap2_flat[N_F2*PM2HEI*PM2WID] = {};
  s16 hidden[N_HL];
  s16 output[LABEL];

  // These arrays are defined as global variables.
  /*
  s16 pmap1_flat[N_F1*PM1HEI*PM1WID];
  s16 w_conv2_flat[N_F2*N_F1*FHEI*FWID];
  s16 b_conv2[N_F2]
  s16 w_hidden[N_HL][PM2HEI*PM2WID*N_F2];
  s16 b_hidden[N_HL];
  s16 w_output[LABEL][N_HL];
  s16 b_output[LABEL];
  */

  for (i=0; i<60; i++) xil_printf("\n\r");

  init_platform();
  xil_printf("init_platform done\n\r");

  test_platform();
  xil_printf("test_platform done\n\r");

  // TODO: load data from the SD card using Linux
  //load_images_flat(pmap1_flat, N_F1, PM1HEI, PM1WID);

  //load_weight_flat(w_conv2_flat, N_F2, N_F1, FHEI, FWID);
  //load_bias(b_conv2, N_F2);
  //load_weight(w_hidden, N_HL, PM2HEI*PM2WID*N_F2);
  //load_bias(b_hidden, N_HL);
  //load_weight(w_output, LABEL, N_HL);
  //load_bias(b_hidden, LABEL);

  post_data(pmap1_flat, w_conv2_flat);
  xil_printf("post_data done\n\r");

  exec_core();
  xil_printf("exec_core done\n\r");
  //probe();

  //for (i = 0; i < N_F1; i+=5) {
  //  for (j = 0; j < PM1HEI; j++) {
  //    for (l = 0; l < 5; l++) {
  //      for (k = 0; k < PM1WID; k++) {
  //        Xil_Out32(reg_input_addr, PM1HEI*PM1WID*(i+l)+PM1WID*(j)+(k));
  //        printf("%3d", (int)Xil_In32(reg_probe));
  //      }
  //      printf(" |");
  //    }
  //    printf("\n");
  //  }
  //  printf("\n");
  //}

  get_data(pmap2_flat);
  xil_printf("get_data done\n\r");

  //for (i=0; i<50; i++) {
  //  for (j=0; j<16; j++)
  //    printf("%4d ", pmap2_flat[16*i+j]);
  //  printf("\n");
  //}

  for (i=0; i<50; i++)
    for (j=0; j<16; j++)
      pmap2_flat[16*i+j] = pmap2_flat[16*i+j] + b_conv2[i];

  // TODO: insert activate of conv2 to pl
  activate_1d(pmap2_flat, N_F2*PM2HEI*PM2WID);
  xil_printf("activation done\n\r");

  /*
   * calculate fully connected layers on CPU
   * because these layers has tendency to be data intensive.
   */
  full_connect(pmap2_flat, hidden,
                w_hidden, b_hidden, PM2HEI*PM2WID*N_F2, N_HL);
  xil_printf("fully-connect done\n\r");
  activate_1d(hidden, N_HL);

  full_connect(hidden, output,
                w_output, b_output, N_HL, LABEL);

  print_result(output);
  xil_printf("classification done\n\r");

  cleanup_platform();

  return 0;
}
