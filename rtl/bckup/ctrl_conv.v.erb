module ctrl_conv(/*AUTOARG*/);
`include "parameters.vh"
<%- load "parameters.rb" -%>

  parameter S_WAIT   = 'd0;
  parameter S_WREG   = 'd1;
  parameter S_CHARGE = 'd2;
  parameter S_CONV   = 'd3;
  parameter S_OUTPUT = 'd4;

  /*AUTOINPUT*/
  input               clk;
  input               xrst;
  input               req;
  input [LWIDTH-1:0]  total_in;
  input [LWIDTH-1:0]  total_out;
  input [LWIDTH-1:0]  img_size;
  input [LWIDTH-1:0]  fil_size;

  /*AUTOOUTPUT*/
  output              ack;
  output              wreg_we;
  output              conv_en;
  output              mem_feat_we;
  output              mem_feat_rst;
  output [FACCUM-1:0] mem_feat_addr;
  output [FACCUM-1:0] mem_feat_addr_d1;

  /*AUTOWIRE*/
  wire wreg_start;
  wire wreg_valid;
  wire wreg_end;
  wire charge_end;
  wire conv_start;
  wire conv_valid;
  wire conv_end;

  /*AUTOREG*/
  reg [3-1:0]       r_state;
  reg [LWIDTH-1:0]  r_count_in;
  reg [LWIDTH-1:0]  r_count_out;
  reg [LWIDTH-1:0]  r_total_in;
  reg [LWIDTH-1:0]  r_total_out;
  reg [LWIDTH-1:0]  r_img_size;
  reg [LWIDTH-1:0]  r_fil_size;
  reg [LWIDTH-1:0]  r_fea_size;
  reg               r_breg;
  reg [4-1:0]       r_charge;
  <%- for i in 0...$conv_delay+1 -%>
  reg               r_feat_we_d<%=i%>;
  reg               r_feat_rst_d<%=i%>;
  reg               r_conv_we_d<%=i%>;
  <%- end -%>
  <%- for i in 0..$conv_delay+1 -%>
  reg [FACCUM-1:0]  r_feat_addr_d<%=i%>;
  <%- end -%>

//====================================================================
// core control
//====================================================================

  // main FSM
  always @(posedge clk)
    if (!xrst)
      r_state <= S_WAIT;
    else
      case (r_state)
        S_WAIT:
          if (req)
            r_state <= S_WREG;
        S_WREG:
          if (wreg_end)
            r_state <= S_CHARGE;
        S_CHARGE:
          if (charge_end)
            if (r_count_in == r_total_in - 1)
              r_state <= S_OUTPUT;
            else
              r_state <= S_CONV;
        S_CONV:
          if (conv_end)
          begin
            r_state <= S_WREG;
            r_count_in <= r_count_in + 1;
          end
        S_OUTPUT:
          if (out_end)
            if (r_count_out + <%=$core%> < r_total_out)
            begin
              r_state <= S_WREG;
              r_count_in <= 0;
              r_count_out <= r_count_out + <%=$core%>;
            end
            else
            begin
              r_state <= S_WAIT;
              r_count_in <= 0;
              r_count_out <= 0;
            end
        default:
          r_state <= S_WAIT;
      endcase

  //wait exec (initialize)
  always @(posedge clk)
    if (!xrst)
    begin
      r_total_in  <= 0;
      r_total_out <= 0;
      r_img_size  <= 0;
      r_fil_size  <= 0;
      r_fea_size  <= 0;
    end
    else if (r_state == S_WAIT && req)
    begin
      r_total_in  <= total_in;
      r_total_out <= total_out;
      r_img_size  <= img_size;
      r_fil_size  <= fil_size;
      r_fea_size  <= img_size - fil_size + 1;
    end

//====================================================================
// wreg control
//====================================================================

  assign wreg_we    = wreg_valid;

  assign wreg_start = (r_state == S_WREG)
                        && r_wreg_x == 0
                        && r_wreg_y == 0;

  assign wreg_valid = (r_state == S_WREG)
                        && 0 <= r_wreg_x && r_wreg_x < r_fil_size
                        && 0 <= r_wreg_y && r_wreg_y < r_fil_size
                      || r_breg;

  assign wreg_end   = r_breg;

  //convwreg write
  always @(posedge clk)
    if (r_state == S_WREG)
      if (r_wreg_x == r_fil_size - 1)
        r_wreg_x <= 0;
      else
        r_wreg_x <= r_wreg_x + 1;
    else
      r_wreg_x <= 0;

  always @(posedge clk)
    if (r_state == S_WREG && r_wreg_x == r_fil_size - 1)
      if (r_wreg_y == r_fil_size - 1)
        r_wreg_y <= 0;
      else
        r_wreg_y <= r_wreg_y + 1;
    else
      r_wreg_y <= 0;

  always @(posedge clk)
    if (r_state == S_WREG)
      r_breg <= r_wreg_x == r_fil_size - 1 && r_wreg_y == r_fil_size - 1;
    else
      r_breg <= 0;

//====================================================================
// charge control
//====================================================================

  assign charge_end = r_charge == r_img_size + 3;

  always @(posedge clk)
    if (r_state == S_CHARGE)
      r_charge <= r_charge + 1;
    else
      r_charge <= 0;

//====================================================================
// conv control
//====================================================================

  assign conv_start = (r_state == S_CONV || r_state == S_OUTPUT)
                        && r_conv_x == r_fil_size - 1
                        && r_conv_y == r_fil_size - 1;

  assign conv_valid = (r_state == S_CONV || r_state == S_OUTPUT)
                        && r_fil_size - 1 <= r_conv_x && r_conv_x < r_img_size
                        && r_fil_size - 1 <= r_conv_y && r_conv_y < r_img_size;

  assign conv_end   = (r_state == S_CONV || r_state == S_OUTPUT)
                        && r_conv_x == r_img_size - 1
                        && r_conv_y == r_img_size - 1;

  //conv exec
  always @(posedge clk)
    if ((r_state == S_CONV || r_state == S_POOL))
      if (r_conv_x == r_img_size - 1)
        r_conv_x <= 0;
      else
        r_conv_x <= r_conv_x + 1;
    else
      r_conv_x <= 0;

  always @(posedge clk)
    if ((r_state == S_CONV || r_state == S_POOL) && r_conv_x == r_img_size - 1)
      if (r_conv_y == r_img_size - 1)
        r_conv_y <= 0;
      else
        r_conv_y <= r_conv_y + 1;
    else
      r_conv_y <= 0;

//====================================================================
// accum execution
//====================================================================

  assign mem_feat_we      = r_feat_we_d<%=$conv_delay%>;
  assign mem_feat_rst     = r_feat_rst_d<%=$conv_delay%>;
  assign mem_feat_addr_d1 = r_feat_addr_d<%=$conv_delay+1%>;
  assign mem_feat_addr    = r_feat_addr_d<%=$conv_delay%>;
  assign conv_en          = r_conv_en_d<%=$conv_delay%>;

  <%- for i in 1...$conv_delay+1 -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (r_state == S_CONV && conv_valid)
      r_feat_we_d0 <= 1;
    else
      r_feat_we_d0 <= 0;
    <%- else -%>
    if (!xrst)
      r_feat_we_d<%=i%> <= 0;
    else
      r_feat_we_d<%=i%> <= r_feat_we_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

  <%- for i in 1..$conv_delay+1 -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_feat_addr_d0 <= 0;
    else if (conv_end)
      r_feat_addr_d0 <= 0;
    else if (conv_valid)
      r_feat_addr_d0 <= r_feat_addr_d0 + 1;
    <%- else -%>
    if (!xrst)
      r_feat_addr_d<%=i%> <= 0;
    else
      r_feat_addr_d<%=i%> <= r_feat_addr_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

  <%- for i in 1...$conv_delay+1 -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (r_state == S_CONV && conv_valid && r_count_in == 0)
      r_feat_rst_d0 <= 1;
    else
      r_feat_rst_d0 <= 0;
    <%- else -%>
    if (!xrst)
      r_feat_rst_d<%=i%> <= 0;
    else
      r_feat_rst_d<%=i%> <= r_feat_rst_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

//====================================================================
// output control
//====================================================================

  <%- for i in 0...$conv_delay+1 -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (r_state == S_OUTPUT && conv_valid)
      r_conv_en_d0 <= 1;
    else
      r_conv_en_d0 <= 0;
    <%- else -%>
    if (!xrst)
      r_conv_en_d<%=i%> <= 0;
    else
      r_conv_en_d<%=i%> <= r_conv_en_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

  assign ack = (r_state == S_OUTPUT) && conv_begin;

endmodule
