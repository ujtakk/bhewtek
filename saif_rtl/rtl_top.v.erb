`timescale 1ns/1ps

module saif_rtl();
`include "parameters.vh"
<%- load "parameters.rb" -%>

  /*AUTOREGINPUT*/

  /*AUTOWIRE*/

  //clock
  always
  begin
    clk = 0;
    #(STEP/2);
    clk = 1;
    #(STEP/2);
  end

  reg [DWIDTH-1:0] mem_in [2**INSIZE-1:0];
  <%- for i in 0...$core -%>
  reg [DWIDTH-1:0] mem_w<%=i%> [2**WSIZE-1:0];
  <%- end -%>

  integer fp;
  integer i;
  initial
  begin
    $set_toggle_region(saif_rtl.dut0);

    mem_clear;

    xrst = 0;

    input_addr = 0;
    write_input = 0;
    input_we = 0;

    weight_we = 4'd0;
    weight_addr = 0;
    write_weight = 0;

    output_addr = 0;
    output_re = 0;

    #(STEP);
    xrst = 1;

    read_input;
    input_we = 1;
    for (i=0; i<2**INSIZE; i=i+1)
    begin
      input_addr = i;
      write_input = mem_in[i];
      #(STEP*2);
    end
    input_we = 0;
    input_addr = 0;
    write_input = 0;

    read_weight;
    <%- for n in 0...$core -%>
    weight_we = 4'd<%=n+1%>;
    for (i=0; i<2**WSIZE; i=i+1)
    begin
      weight_addr = i;
      write_weight = mem_w<%=n%>[i];
      #(STEP*2);
    end
    weight_we = 4'd0;
    weight_addr = 0;
    write_weight = 0;
    <%- end -%>

    $toggle_start();
    #(STEP);

    xrst = 0;
    req = 0;
    fil_size = FSIZE;
    img_size = INSIZE;
    total_in = N_F1;
    total_out = N_F2;
    input_addr = 0;
    weight_addr = 0;
    input_we = 0;
    write_input = 0;
    write_weight = 0;
    weight_we = 4'd0;
    output_addr = 0;
    output_re = 0;

    #(STEP);

    xrst = 1;

    #(STEP*5);

    req = 1;

    #(STEP*5);

    req = 0;

    while(!ack) #(STEP);

    #(STEP*10);

    $toggle_stop();
    $toggle_report("<%=$project%>/saif_rtl/saif{CORE}/rtl_top{NUM}_{FILE}.saif", 1.0e-9, "saif_rtl");
    $finish();
  end

  top dut0(/*AUTOINST*/);

  task mem_clear;
    begin
      for (i=0; i<2**INSIZE; i=i+1)
      begin
        mem_in[i] = {DWIDTH{1'b0}};
      end

      <%- for i in 0...$core -%>
      for (i=0; i<2**WSIZE; i=i+1)
      begin
        mem_w<%=i%>[i] = {DWIDTH{1'b0}};
      end
      <%- end -%>
    end
  endtask

  task read_input;
    begin
      <%- num = "{NUM}" -%><%- file = "{FILE}" -%>
      <%- for i in 0...$n_f1 -%>
      $readmemb("/home/work/takau/bhewtek/data/mnist/bpmap1/<%=num%>/data<%=file%>_<%=i%>.bin", mem_in, <%=($insize**2)*i%>, <%=($insize**2)*(i+1)-1%>);
      <%- end -%>
    end
  endtask

  task read_weight;
    begin
      <%- for i in 0...$n_f2/$core -%>
      <%-   for j in 0...$n_f1 -%>
      <%-   for k in 0...$core -%>
      $readmemb("/home/work/takau/bhewtek/data/mnist/lenet/bwb_2/data<%=$core*i+k%>_<%=j%>.bin", mem_w<%=k%>, <%=($fsize**2)*($n_f1*i+j)%>, <%=($fsize**2)*($n_f1*i+j+1)-1%>);
      <%-   end -%>
      <%-   end -%>
      <%- end -%>
      <%- if $n_f2 % $core != 0 -%>
      <%-   for j in 0...$n_f1 -%>
      <%-   for k in 0...$core -%>
      <%-     if ($n_f2 - ($n_f2 % $core) + k) < $n_f2 -%>
      $readmemb("/home/work/takau/bhewtek/data/mnist/lenet/bwb_2/data<%=$n_f2-($n_f2%$core)+k%>_<%=j%>.bin", mem_w<%=k%>, <%=($fsize**2)*($n_f1*($n_f2/$core)+j)%>, <%=($fsize**2)*($n_f1*($n_f2/$core)+j+1)-1%>);
      <%-     else -%>
      $readmemb("/home/work/takau/bhewtek/data/mnist/lenet/bwb_2/null.bin", mem_w<%=k%>, <%=($fsize**2)*($n_f1*($n_f2/$core)+j)%>, <%=($fsize**2)*($n_f1*($n_f2/$core)+j+1)-1%>);
      <%-     end -%>
      <%-   end -%>
      <%-   end -%>
      <%- end -%>
    end
  endtask

endmodule
