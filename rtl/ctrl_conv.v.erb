module ctrl_conv(/*AUTOARG*/);
`include "parameters.vh"
<%- load "parameters.rb" -%>

  parameter S_CORE_WAIT   = 'd0;
  parameter S_CORE_WEIGHT = 'd1;
  parameter S_CORE_INPUT  = 'd2;
  parameter S_CORE_OUTPUT = 'd3;

  parameter S_WAIT        = 'd0;
  parameter S_ACTIVE      = 'd1;

  /*AUTOINPUT*/
  input               clk;
  input               xrst;
  input               in_begin;
  input               in_valid;
  input               in_end;
  input [2-1:0]       core_state;
  input [LWIDTH-1:0]  img_size;
  input [LWIDTH-1:0]  fil_size;
  input               first_input;

  /*AUTOOUTPUT*/
  output              out_begin;
  output              out_valid;
  output              out_end;
  output              wreg_we;
  output              mem_feat_we;
  output              mem_feat_rst;
  output [FACCUM-1:0] mem_feat_addr;
  output [FACCUM-1:0] mem_feat_addr_d1;

  /*AUTOWIRE*/
  wire conv_begin;
  wire conv_vaild;
  wire conv_end;

  /*AUTOREG*/
  reg               r_state;
  reg [2-1:0]       r_core_state;
  reg               r_in_valid;
  reg [LWIDTH-1:0]  r_img_size;
  reg [LWIDTH-1:0]  r_fil_size;
  reg [LWIDTH-1:0]  r_fea_size;
  reg [LWIDTH-1:0]  r_conv_x;
  reg [LWIDTH-1:0]  r_conv_y;
  <%- for i in 0..$d_convbuf -%>
  reg               r_first_input_d<%=i%>;
  reg               r_last_input_d<%=i%>;
  reg               r_conv_begin_d<%=i%>;
  reg               r_conv_valid_d<%=i%>;
  reg               r_conv_end_d<%=i%>;
  <%- end -%>
  <%- for i in 0..$d_conv -%>
  reg               r_feat_we_d<%=i%>;
  reg               r_feat_rst_d<%=i%>;
  reg               r_out_begin_d<%=i%>;
  reg               r_out_valid_d<%=i%>;
  reg               r_out_end_d<%=i%>;
  <%- end -%>
  <%- for i in 0..$d_conv+1 -%>
  reg [FACCUM-1:0]  r_feat_addr_d<%=i%>;
  <%- end -%>

//==========================================================
// main FSM
//==========================================================

  always @(posedge clk)
    if (!xrst)
      r_state <= S_WAIT;
    else
      case (r_state)
        S_WAIT:
          if (in_begin)
            r_state <= S_ACTIVE;
        S_ACTIVE:
          if (out_end)
            r_state <= S_WAIT;
      endcase

  always @(posedge clk)
    if (!xrst)
      r_core_state <= S_CORE_WAIT;
    else
      r_core_state <= core_state;

  always @(posedge clk)
    if (!xrst)
    begin
      r_img_size  <= 0;
      r_fil_size  <= 0;
      r_fea_size  <= 0;
    end
    else if (in_begin && r_state == S_WAIT)
    begin
      r_img_size  <= img_size;
      r_fil_size  <= fil_size;
      r_fea_size  <= img_size - fil_size + 1;
    end

  always @(posedge clk)
    if (!xrst)
      r_in_valid  <= 0;
    else
      r_in_valid  <= in_valid;

  always @(posedge clk)
    if (!xrst)
      r_conv_x <= 0;
    else if (r_state == S_WAIT)
      r_conv_x <= 0;
    else if (r_state == S_ACTIVE
              && (r_core_state == S_CORE_INPUT || r_core_state == S_CORE_OUTPUT)
              && r_in_valid)
      if (r_conv_x == r_img_size - 1)
        r_conv_x <= 0;
      else
        r_conv_x <= r_conv_x + 1;

  always @(posedge clk)
    if (!xrst)
      r_conv_y <= 0;
    else if (r_state == S_ACTIVE
              && (r_core_state == S_CORE_INPUT || r_core_state == S_CORE_OUTPUT)
              && r_in_valid && r_conv_x == r_img_size - 1)
      if (r_conv_y == r_img_size - 1)
        r_conv_y <= 0;
      else
        r_conv_y <= r_conv_y + 1;

//==========================================================
// wreg control
//==========================================================

  assign wreg_we = (r_state == S_ACTIVE)
                    && (r_core_state == S_CORE_WEIGHT)
                    && r_in_valid;

//==========================================================
// conv control
//==========================================================

  assign conv_begin = r_conv_begin_d<%=$d_convbuf%>;
  assign conv_valid = r_conv_valid_d<%=$d_convbuf%>;
  assign conv_end   = r_conv_end_d<%=$d_convbuf%>;

  <%- for n in ["begin", "valid", "end"] -%>
  <%-   for i in 0..$d_convbuf -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_conv_<%=n%>_d0 <= 0;
    else
      <%- case n -%>
      <%- when "begin" -%>
      r_conv_begin_d0 <= (r_state == S_ACTIVE)
                            && (r_core_state == S_CORE_INPUT || r_core_state == S_CORE_OUTPUT)
                            && r_conv_x == r_fil_size - 1
                            && r_conv_y == r_fil_size - 1;
      <%- when "valid" -%>
      r_conv_valid_d0 <= (r_state == S_ACTIVE)
                            && (r_core_state == S_CORE_INPUT || r_core_state == S_CORE_OUTPUT)
                            && r_conv_x >= r_fil_size - 1
                            && r_conv_y >= r_fil_size - 1;
      <%- when "end" -%>
      r_conv_end_d0   <= (r_state == S_ACTIVE)
                            && (r_core_state == S_CORE_INPUT || r_core_state == S_CORE_OUTPUT)
                            && r_conv_x == r_img_size - 1
                            && r_conv_y == r_img_size - 1;
      <%- else -%>
      <%- end -%>
    <%- else -%>
    if (!xrst)
      r_conv_<%=n%>_d<%=i%> <= 0;
    else
      r_conv_<%=n%>_d<%=i%> <= r_conv_<%=n%>_d<%=i-1%>;
    <%- end -%>
  <%-   end -%>
  <%- end -%>

  <%- for i in 0..$d_convbuf -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_first_input_d0  <= 0;
    else
      r_first_input_d0  <= first_input;
    <%- else -%>
    if (!xrst)
      r_first_input_d<%=i%> <= 0;
    else
      r_first_input_d<%=i%> <= r_first_input_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

  <%- for i in 0..$d_convbuf -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_last_input_d0  <= 0;
    else
      r_last_input_d0  <= r_core_state == S_CORE_OUTPUT;
    <%- else -%>
    if (!xrst)
      r_last_input_d<%=i%> <= 0;
    else
      r_last_input_d<%=i%> <= r_last_input_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

//==========================================================
// feat-accum control
//==========================================================

  assign mem_feat_we      = r_feat_we_d<%=$d_conv%>;
  assign mem_feat_rst     = r_feat_rst_d<%=$d_conv%>;
  assign mem_feat_addr    = r_feat_addr_d<%=$d_conv%>;
  assign mem_feat_addr_d1 = r_feat_addr_d<%=$d_conv+1%>;

  <%- for i in 0..$d_conv -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_feat_we_d0 <= 0;
    else
      r_feat_we_d0 <= conv_valid;
    <%- else -%>
    if (!xrst)
      r_feat_we_d<%=i%> <= 0;
    else
      r_feat_we_d<%=i%> <= r_feat_we_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

  <%- for i in 0..$d_conv -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_feat_rst_d0 <= 0;
    else
      r_feat_rst_d0 <= conv_valid && r_first_input_d<%=$d_convbuf%>;
    <%- else -%>
    if (!xrst)
      r_feat_rst_d<%=i%> <= 0;
    else
      r_feat_rst_d<%=i%> <= r_feat_rst_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

  <%- for i in 0..$d_conv+1 -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_feat_addr_d0 <= 0;
    else if (conv_end)
      r_feat_addr_d0 <= 0;
    else if (conv_valid)
      r_feat_addr_d0 <= r_feat_addr_d0 + 1;
    <%- else -%>
    if (!xrst)
      r_feat_addr_d<%=i%> <= 0;
    else
      r_feat_addr_d<%=i%> <= r_feat_addr_d<%=i-1%>;
    <%- end -%>
  <%- end -%>

//==========================================================
// output control
//==========================================================

  assign out_begin  = r_out_begin_d<%=$d_conv%>;
  assign out_valid  = r_out_valid_d<%=$d_conv%>;
  assign out_end    = r_out_end_d<%=$d_conv%>;

  <%- for n in ["begin", "valid", "end"] -%>
  <%-   for i in 0..$d_conv -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (conv_<%=n%> && r_last_input_d<%=$d_convbuf%>)
      r_out_<%=n%>_d0 <= 1;
    else
      r_out_<%=n%>_d0 <= 0;
    <%- else -%>
    if (!xrst)
      r_out_<%=n%>_d<%=i%> <= 0;
    else
      r_out_<%=n%>_d<%=i%> <= r_out_<%=n%>_d<%=i-1%>;
    <%- end -%>
  <%-   end -%>
  <%- end -%>

endmodule
