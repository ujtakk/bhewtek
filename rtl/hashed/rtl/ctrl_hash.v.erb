% load "parameters.rb"

module ctrl_hash(/*AUTOARG*/);
`include "parameters.vh"

  parameter S_WAIT    = 'd0;
  parameter S_WEIGHT  = 'd1;
  parameter S_INPUT   = 'd2;
  parameter S_OUTPUT  = 'd3;

  parameter S_W_SLEEP   = 'd0;
  parameter S_W_WEIGHT  = 'd1;
  parameter S_W_HASH    = 'd2;
  parameter S_W_BIAS    = 'd3;

  /*AUTOINPUT*/
  input               clk;
  input               xrst;
  input               req;
  input               in_begin;
  input               in_valid;
  input               in_end;
  input [INSIZE-1:0]  input_addr;
  input [WSIZE-1:0]   weight_addr;
  input [BSIZE-1:0]   bias_addr;
  input [OUTSIZE-1:0] output_addr;
  input [LWIDTH-1:0]  total_out;
  input [LWIDTH-1:0]  total_in;
  input [LWIDTH-1:0]  img_size;
  input [LWIDTH-1:0]  fil_size;

  // for hash table
  input [HWIDTH-1:0]  hash_addr;

  /*AUTOOUTPUT*/
  output                ack;
  output [2-1:0]        core_state;
  output                out_begin;
  output                out_valid;
  output                out_end;
  output                buf_pix_en;
  output [INSIZE-1:0]   mem_input_addr;
  output [WSIZE-1:0]    mem_weight_addr;
  output [BSIZE-1:0]    mem_bias_addr;
  output                mem_output_we;
  output [OUTSIZE-1:0]  mem_output_addr;
  output                first_input;
  output                last_input;
  output                wreg_we;
  output                breg_we;
  output [LWIDTH-1:0]   w_img_size;
  output [LWIDTH-1:0]   w_fil_size;

  // for hash table
  output [HWIDTH-1:0]   lut_hash_addr;
  output                hash_we;

  /*AUTOWIRE*/
  wire s_weight_end;
  wire s_input_end;
  wire s_output_end;

  // for hash table
  wire final_iter;
  wire s_w_sleep_end;
  wire s_w_weight_end;
  wire s_w_hash_end;
  wire s_w_bias_end;

  /*AUTOREG*/
  reg [2-1:0]       r_state;
  reg               r_ack;
  reg [LWIDTH-1:0]  r_total_out;
  reg [LWIDTH-1:0]  r_total_in;
  reg [LWIDTH-1:0]  r_img_size;
  reg [LWIDTH-1:0]  r_fil_size;
  reg [LWIDTH-1:0]  r_pool_size;
  reg [LWIDTH-1:0]  r_count_out;
  reg [LWIDTH-1:0]  r_count_in;
  reg [LWIDTH-1:0]  r_weight_x;
  reg [LWIDTH-1:0]  r_weight_y;
  reg               r_bias;
  reg [WSIZE-1:0]   r_weight_addr;
  reg [WSIZE-1:0]   r_weight_offset;
  reg [BSIZE-1:0]   r_bias_addr;
  reg [BSIZE-1:0]   r_bias_offset;
  reg [LWIDTH-1:0]  r_input_x;
  reg [LWIDTH-1:0]  r_input_y;
  reg [INSIZE-1:0]  r_input_addr;
  reg               r_output_we;
  reg [OUTSIZE-1:0] r_output_addr;
  reg [2-1:0]       r_state_d [<%=$d_pixelbuf%>-1:0];
  reg               r_bias_d [<%=$d_pixelbuf%>-1:0];
  reg               r_wreg_we_d [<%=$d_pixelbuf%>-1:0];
  reg               r_out_begin_d [<%=$d_pixelbuf%>-1:0];
  reg               r_out_valid_d [<%=$d_pixelbuf%>-1:0];
  reg               r_out_end_d [<%=$d_pixelbuf%>-1:0];
  reg               r_first_input_d [<%=$d_pixelbuf%>-1:0];
  reg               r_last_input_d [<%=$d_pixelbuf%>-1:0];
  reg               r_buf_pix_en;
  reg [LWIDTH-1:0]  r_d_pixelbuf;

  // for hash table
  reg [LWIDTH-1:0]  r_comped_fil_size;
  reg [LWIDTH-1:0]  r_lut_size;
  reg [LWIDTH-1:0]  r_weight;
  reg [2-1:0]       r_state_weight;
  reg [2-1:0]       r_state_weight_d [<%=$d_pixelbuf%>:0];
  reg [HWIDTH-1:0]  r_hash_addr;
  reg [HWIDTH-1:0]  r_hash_offset;

//==========================================================
// core control
//==========================================================

  assign core_state = r_state_d[r_d_pixelbuf];

  assign w_img_size = r_img_size;
  assign w_fil_size = r_fil_size;

  assign first_input = r_first_input_d[r_d_pixelbuf];
  assign last_input  = r_last_input_d[r_d_pixelbuf];

  //main FSM
  always @(posedge clk)
    if (!xrst)
    begin
      r_state     <= S_WAIT;
      r_count_in  <= 0;
      r_count_out <= 0;
    end
    else
      case (r_state)
        S_WAIT:
          if (req)
            r_state <= S_WEIGHT;

        S_WEIGHT:
          if (s_weight_end)
            r_state <= S_INPUT;

        S_INPUT:
          if (s_input_end)
            if (r_count_in == r_total_in - 1)
            begin
              r_state     <= S_OUTPUT;
              r_count_in  <= 0;
            end
            else
            begin
              r_state     <= S_WEIGHT;
              r_count_in  <= r_count_in + 1;
            end

        S_OUTPUT:
          if (s_output_end)
            if (r_count_out >= r_total_out - CORE)
            begin
              r_state     <= S_WAIT;
              r_count_out <= 0;
            end
            else
            begin
              r_state     <= S_WEIGHT;
              r_count_out <= r_count_out + CORE;
            end
      endcase

  <%- for i in 1...$d_pixelbuf -%>
  always @(posedge clk)
    <%- if i == 1 -%>
    if (!xrst)
      r_state_d[<%=i%>] <= 0;
    else
      r_state_d[<%=i%>] <= r_state;
    <%- else -%>
    if (!xrst)
      r_state_d[<%=i%>] <= 0;
    else
      r_state_d[<%=i%>] <= r_state_d[<%=i-1%>];
    <%- end -%>
  <%- end -%>

  //wait exec (initialize)
  always @(posedge clk)
    if (!xrst)
    begin
      r_total_in    <= 0;
      r_total_out   <= 0;
      r_img_size    <= 0;
      r_fil_size    <= 0;
      r_d_pixelbuf  <= 0;
      r_comped_fil_size <= 0;
      r_lut_size <= 0;
    end
    else if (r_state == S_WAIT && req)
    begin
      r_total_in    <= total_in;
      r_total_out   <= total_out;
      r_img_size    <= img_size;
      r_fil_size    <= fil_size;
      r_d_pixelbuf  <= img_size - fil_size + 8 - 1;
      r_comped_fil_size <= fil_size * fil_size * COMP_RATE;
      r_lut_size <= fil_size * fil_size;
    end

  <%- for i in 0...$d_pixelbuf -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
    begin
      r_first_input_d[0] <= 0;
      r_last_input_d[0]  <= 0;
    end
    else
    begin
      r_first_input_d[0] <= (r_state == S_INPUT) && r_count_in == 0;
      r_last_input_d[0]  <= (r_state == S_INPUT) && r_count_in == r_total_in - 1;
    end
    <%- else -%>
    if (!xrst)
    begin
      r_first_input_d[<%=i%>] <= 0;
      r_last_input_d[<%=i%>]  <= 0;
    end
    else
    begin
      r_first_input_d[<%=i%>] <= r_first_input_d[<%=i-1%>];
      r_last_input_d[<%=i%>]  <= r_last_input_d[<%=i-1%>];
    end
    <%- end -%>
  <%- end -%>

//==========================================================
// weight control
//==========================================================

  assign mem_weight_addr  = r_weight_addr + r_weight_offset;
  assign lut_hash_addr    = r_hash_addr   + r_hash_offset;
  assign mem_bias_addr    = r_bias_addr   + r_bias_offset;

  assign s_w_sleep_end  = r_state_weight == S_W_SLEEP
                          && (req
                              || s_input_end  && r_count_in != r_total_in - 1
                              || s_output_end && r_count_out < r_total_out - CORE);
  assign s_w_weight_end = r_state_weight == S_W_WEIGHT
                          && r_weight == r_comped_fil_size - 1;
  assign s_w_hash_end   = r_state_weight == S_W_HASH
                          && r_weight == r_lut_size - 1;
  assign s_w_bias_end   = r_state_weight == S_W_BIAS;

  assign s_weight_end     = r_count_in == r_total_in - 1
                          ? s_w_bias_end
                          : s_w_hash_end;

  assign final_iter = r_count_out >= r_total_out - CORE
                      && r_count_in == r_total_in - 1;

  always @(posedge clk)
    if (!xrst)
      r_state_weight <= S_W_SLEEP;
    else
      case (r_state_weight)
        S_W_SLEEP:
          if (s_w_sleep_end)
            r_state_weight <= S_W_WEIGHT;

        S_W_WEIGHT:
          if (s_w_weight_end)
            r_state_weight <= S_W_HASH;

        S_W_HASH:
          if (s_w_hash_end)
            if (r_count_in == r_total_in - 1)
              r_state_weight <= S_W_BIAS;
            else
              r_state_weight <= S_W_SLEEP;

        S_W_BIAS:
          if (s_w_bias_end)
            r_state_weight <= S_W_SLEEP;
      endcase

  <%- for i in 1..$d_pixelbuf -%>
  always @(posedge clk)
    <%- if i == 1 -%>
    if (!xrst)
      r_state_weight_d[<%=i%>] <= 0;
    else
      r_state_weight_d[<%=i%>] <= r_state_weight;
    <%- else -%>
    if (!xrst)
      r_state_weight_d[<%=i%>] <= 0;
    else
      r_state_weight_d[<%=i%>] <= r_state_weight_d[<%=i-1%>];
    <%- end -%>
  <%- end -%>

  always @(posedge clk)
    if (!xrst)
      r_weight <= 0;
    else
      case (r_state)
        S_WEIGHT:
          case (r_state_weight)
            S_W_WEIGHT:
              if (r_weight == r_comped_fil_size - 1)
                r_weight <= 0;
              else
                r_weight <= r_weight + 1;

            S_W_HASH:
              if (r_weight == r_lut_size - 1)
                r_weight <= 0;
              else
                r_weight <= r_weight + 1;

            default:
              r_weight <= 0;
          endcase

        default:
          r_weight <= 0;
      endcase

  always @(posedge clk)
    if (!xrst)
    begin
      r_weight_offset <= 0;
      r_hash_offset   <= 0;
      r_bias_offset   <= 0;
    end
    else if (req || ack)
    begin
      r_weight_offset <= weight_addr;
      r_hash_offset   <= hash_addr;
      r_bias_offset   <= bias_addr;
    end

  always @(posedge clk)
    if (!xrst)
    begin
      r_weight_addr <= 0;
      r_hash_addr   <= 0;
      r_bias_addr   <= 0;
    end
    else if (final_iter && r_state_weight_d[r_d_pixelbuf] == S_W_BIAS)
    begin
      r_weight_addr <= 0;
      r_hash_addr   <= 0;
      r_bias_addr   <= 0;
    end
    else
      case (r_state_weight_d[r_d_pixelbuf])
        S_W_WEIGHT: r_weight_addr <= r_weight_addr + 1;
        S_W_HASH:   r_hash_addr   <= r_hash_addr + 1;
        S_W_BIAS:   r_bias_addr   <= r_bias_addr + 1;
        default:
        begin
          r_weight_addr <= r_weight_addr;
          r_hash_addr   <= r_hash_addr;
          r_bias_addr   <= r_bias_addr;
        end
      endcase

//==========================================================
// wreg & bias control
//==========================================================

  assign wreg_we = r_state_weight_d[r_d_pixelbuf+1] == S_W_WEIGHT;
  assign hash_we = r_state_weight_d[r_d_pixelbuf+1] == S_W_HASH;
  assign breg_we = r_state_weight_d[r_d_pixelbuf+1] == S_W_BIAS;

//==========================================================
// input control
//==========================================================

  assign mem_input_addr = input_addr + r_input_addr;

  assign s_input_end    = (r_state == S_INPUT)
                            && r_input_x == r_img_size - 1
                            && r_input_y == r_img_size - 1;

  assign buf_pix_en = r_buf_pix_en;

  always @(posedge clk)
    if (!xrst)
    begin
      r_input_x <= 0;
      r_input_y <= 0;
    end
    else
      case (r_state)
        S_INPUT:
          if (r_input_x == r_img_size - 1)
          begin
            r_input_x <= 0;
            if (r_input_y == r_img_size - 1)
              r_input_y <= 0;
            else
              r_input_y <= r_input_y + 1;
          end
          else
            r_input_x <= r_input_x + 1;

        default:
        begin
          r_input_x <= 0;
          r_input_y <= 0;
        end
      endcase

  always @(posedge clk)
    if (!xrst)
      r_input_addr <= 0;
    else if (r_state == S_OUTPUT)
      r_input_addr <= 0;
    else if (r_state == S_INPUT)
      r_input_addr <= r_input_addr + 1;

  always @(posedge clk)
    if (!xrst)
      r_buf_pix_en <= 0;
    else
      r_buf_pix_en <= (r_state == S_INPUT) && r_out_begin_d[0];

//==========================================================
// output control
//==========================================================

  assign ack              = r_ack;

  assign mem_output_we    = r_output_we;
  assign mem_output_addr  = output_addr + r_output_addr;

  assign out_begin        = r_out_begin_d[r_d_pixelbuf];
  assign out_valid        = r_out_valid_d[r_d_pixelbuf];
  assign out_end          = r_out_end_d[r_d_pixelbuf];

  assign s_output_end     = (r_state == S_OUTPUT) && in_end;

  always @(posedge clk)
    if (!xrst)
      r_ack <= 1;
    else if (req)
      r_ack <= 0;
    else if (s_output_end && r_count_out >= r_total_out - CORE)
      r_ack <= 1;

  always @(posedge clk)
    if (!xrst)
      r_output_we <= 0;
    else
      r_output_we <= (r_state == S_OUTPUT) && in_valid;

  always @(posedge clk)
    if (!xrst)
      r_output_addr <= 0;
    else if (ack)
      r_output_addr <= 0;
    else if (mem_output_we)
      r_output_addr <= r_output_addr + 1;

  <%- for n in ["begin", "valid", "end"] -%>
  <%-   for i in 0...$d_pixelbuf -%>
  always @(posedge clk)
    <%- if i == 0 -%>
    if (!xrst)
      r_out_<%=n%>_d[0] <= 0;
    else
      <%- case n -%>
      <%- when "begin" -%>
      r_out_begin_d[0] <= req
                        || s_weight_end
                        || s_input_end  && (r_count_in != r_total_in - 1);
      <%- when "valid" -%>
      r_out_valid_d[0] <= (r_state == S_WEIGHT || r_state == S_INPUT);
      <%- when "end" -%>
      r_out_end_d[0]   <= s_weight_end || s_input_end;
      <%- else -%>
      <%- end -%>
    <%- else -%>
    if (!xrst)
      r_out_<%=n%>_d[<%=i%>] <= 0;
    else
      r_out_<%=n%>_d[<%=i%>] <= r_out_<%=n%>_d[<%=i-1%>];
    <%- end -%>
  <%-   end -%>
  <%- end -%>

endmodule
