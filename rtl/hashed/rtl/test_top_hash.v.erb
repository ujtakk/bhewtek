% load "parameters.rb"
% input  = "/home/work/takau/bhewtek/data/mnist/bpmap1"
// % weight = "/home/work/takau/bhewtek/data/mnist/lenet"
% weight = "/home/work/takau/bhewtek/rtl/hashed/train/lh_t"
% num = 2; file = 4
% offset = 0 # addr offset where bwb_2 start at

`timescale 1ns/1ps

module test_top_hash();
`include "parameters.vh"

  /*AUTOREGINPUT*/
  reg [DWIDTH-1:0] mem_in [2**INSIZE-1:0];
  reg [DWIDTH-1:0] mem_wh [2**13-1:0];
  <%- for i in 0...$core -%>
  reg [DWIDTH-1:0] mem_w<%=i%> [2**WSIZE-1:0];
  reg [HWIDTH-1:0] mem_h<%=i%> [2**HSIZE-1:0];
  reg [DWIDTH-1:0] mem_b<%=i%> [2**BSIZE-1:0];
  <%- end -%>


  /*AUTOWIRE*/

  //clock
  always
  begin
    clk = 0;
    #(STEP/2);
    clk = 1;
    #(STEP/2);
  end

  integer i;
  initial
  begin
    // $set_toggle_region(test_top.dut0);

    xrst = 0;
    req           = 0;
    total_out     = 0;
    total_in      = 0;
    img_size      = 0;
    fil_size      = 0;
    pool_size     = 0;
    input_we      = 0;
    input_addr    = 0;
    write_input   = 0;
    weight_we     = 4'd0;
    weight_addr   = 0;
    write_weight  = 0;
    hash_we       = 4'd0;
    hash_addr     = 0;
    write_hash    = 0;
    bias_we       = 4'd0;
    bias_addr     = 0;
    write_bias    = 0;
    output_re     = 0;
    output_addr   = 0;

    // mem_clear;
    mem_clear_direct;
    #(STEP);

    xrst = 1;
    req           = 0;
    total_out     = N_F2;
    total_in      = N_F1;
    img_size      = 12;
    fil_size      = FSIZE;
    pool_size     = PSIZE;
    input_we      = 0;
    input_addr    = 0;
    write_input   = 0;
    weight_we     = 4'd0;
    weight_addr   = <%=offset%>;
    write_weight  = 0;
    hash_we       = 4'b0;
    hash_addr     = 0;
    write_hash    = 0;
    bias_we       = 4'b0;
    bias_addr     = 0;
    write_bias    = 0;
    output_re     = 0;
    output_addr   = 0;

    read_input_direct;
    // read_input;
    // input_we = 1;
    // for (i=0; i<2**INSIZE; i=i+1)
    // begin
    //   input_addr = i;
    //   #(STEP);
    //   write_input = mem_in[i];
    //   #(STEP);
    // end
    // input_we = 0;
    // input_addr = 0;
    // write_input = 0;

    read_weight_hashed;
    // read_weight_direct;
    // read_weight;
    // <%- for n in 0...$core -%>
    // weight_we = 4'd<%=n+1%>;
    // for (i=0; i<2**WSIZE; i=i+1)
    // begin
    //  weight_addr = i;
    //  #(STEP);
    //  write_weight = mem_w<%=n%>[i];
    //  #(STEP);
    // end
    // weight_we = 4'd0;
    // weight_addr = 0;
    // write_weight = 0;
    // <%- end -%>

    read_hash_direct;
    read_bias_direct;

    // $toggle_start();
    #(STEP);

    req = 1;
    #(STEP);
    req = 0;

    while(!ack) #(STEP);
    #(STEP*10);

    // valid_memin;
    // valid_memw;
    write_output;

    // $toggle_stop();
    // $toggle_report(
    //   "../saif_rtl/saif{CORE}/rtl_top{NUM}_{FILE}.saif",
    //   1.0e-9,
    //   "test_top"
    // );
    $finish();
  end

  top_hash dut0(/*AUTOINST*/);

  task mem_clear;
    begin // {{{
      for (i=0; i<2**INSIZE; i=i+1)
        mem_in[i] = {DWIDTH{1'b0}};

      <%- for i in 0...$core -%>
      for (i=0; i<2**WSIZE; i=i+1)
        mem_w<%=i%>[i] = {DWIDTH{1'b0}};

      for (i=0; i<2**BSIZE; i=i+1)
        mem_b<%=i%>[i] = {DWIDTH{1'b0}};
      <%- end -%>
    end // }}}
  endtask

  task mem_clear_direct;
    begin // {{{
      for (i=0; i<2**INSIZE; i=i+1)
        dut0.mem_input.mem[i] = {DWIDTH{1'b0}};

      <%- for i in 0...$core -%>
      for (i=0; i<2**WSIZE; i=i+1)
        dut0.mem_weight<%=i%>.mem[i] = {DWIDTH{1'b0}};

      for (i=0; i<2**BSIZE; i=i+1)
        dut0.mem_bias<%=i%>.mem[i] = {DWIDTH{1'b0}};
      <%- end -%>
    end // }}}
  endtask

  task read_input;
    begin // {{{
      <%- for i in 0...$n_f1 -%>
      $readmemb(
        "<%=input%>/<%=num%>/data<%=file%>_<%=i%>.bin",
        mem_in,
        <%=($pm1hei**2)*i%>,
        <%=($pm1hei**2)*(i+1)-1%>
      );
      <%- end -%>
    end // }}}
  endtask

  task read_input_direct;
    begin // {{{
      <%- for i in 0...$n_f1 -%>
      $readmemb(
        "<%=input%>/<%=num%>/data<%=file%>_<%=i%>.bin",
        // "../data/binrand_input.dat",
        dut0.mem_input.mem,
        <%=($pm1hei**2)*i%>,
        <%=($pm1hei**2)*(i+1)-1%>
      );
      <%- end -%>
    end // }}}
  endtask

  task read_weight;
    begin // {{{
      <%- for i in 0...$n_f1/$core -%>
      <%-   for j in 0...1 -%>
      <%-     for k in 0...$core -%>
      $readmemb(
        "<%=weight%>/bwb_1/data<%=$core*i+k%>_<%=j%>.bin",
        mem_w<%=k%>,
        <%=($fsize**2)*(1*i+j)%>,
        <%=($fsize**2)*(1*i+j+1)-1%>
      );
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
      <%- if $n_f1 % $core != 0 -%>
      <%-   for j in 0...1 -%>
      <%-     for k in 0...$core -%>
      <%-       if ($n_f1 - ($n_f1 % $core) + k) < $n_f1 -%>
      $readmemb(
        "<%=weight%>/bwb_1/data<%=$n_f1-($n_f1%$core)+k%>_<%=j%>.bin",
        mem_w<%=k%>,
        <%=($fsize**2)*(1*($n_f1/$core)+j)%>,
        <%=($fsize**2)*(1*($n_f1/$core)+j+1)-1%>
      );
      <%-       else -%>
      $readmemb(
        "<%=weight%>/bwb_1/null_w.bin",
        mem_w<%=k%>,
        <%=($fsize**2)*(1*($n_f1/$core)+j)%>,
        <%=($fsize**2)*(1*($n_f1/$core)+j+1)-1%>
      );
      <%-       end -%>
      <%-     end -%>
      <%-   end -%>
      <%- end -%>

      <%- for i in 0...$n_f2/$core -%>
      <%-   for j in 0...$n_f1 -%>
      <%-     for k in 0...$core -%>
      $readmemb(
        "<%=weight%>/bwb_2/data<%=$core*i+k%>_<%=j%>.bin",
        mem_w<%=k%>,
        <%=($fsize**2)*($n_f1*i+j)%> + <%=offset%>,
        <%=($fsize**2)*($n_f1*i+j+1)-1%> + <%=offset%>
      );
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
      <%- if $n_f2 % $core != 0 -%>
      <%-   for j in 0...$n_f1 -%>
      <%-     for k in 0...$core -%>
      <%-       if ($n_f2 - ($n_f2 % $core) + k) < $n_f2 -%>
      $readmemb(
        "<%=weight%>/bwb_2/data<%=$n_f2-($n_f2%$core)+k%>_<%=j%>.bin",
        mem_w<%=k%>,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j)%> + <%=offset%>,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j+1)-1%> + <%=offset%>
      );
      <%-       else -%>
      $readmemb(
        "<%=weight%>/bwb_2/null_w.bin",
        mem_w<%=k%>,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j)%> + <%=offset%>,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j+1)-1%> + <%=offset%>
      );
      <%-       end -%>
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
    end // }}}
  endtask

  task read_weight_direct;
    begin // {{{
      <%- for i in 0...$n_f1/$core -%>
      <%-   for j in 0...1 -%>
      <%-     for k in 0...$core -%>
      $readmemb(
        "<%=weight%>/bwb_1/data<%=$core*i+k%>_<%=j%>.bin",
        dut0.mem_weight<%=k%>.mem,
        <%=($fsize**2)*(1*i+j)%>,
        <%=($fsize**2)*(1*i+j+1)-1%>
      );
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
      <%- if $n_f1 % $core != 0 -%>
      <%-   for j in 0...1 -%>
      <%-     for k in 0...$core -%>
      <%-       if ($n_f1 - ($n_f1 % $core) + k) < $n_f1 -%>
      $readmemb(
        "<%=weight%>/bwb_1/data<%=$n_f1-($n_f1%$core)+k%>_<%=j%>.bin",
        dut0.mem_weight<%=k%>.mem,
        <%=($fsize**2)*(1*($n_f1/$core)+j)%>,
        <%=($fsize**2)*(1*($n_f1/$core)+j+1)-1%>
      );
      <%-       else -%>
      $readmemb(
        "<%=weight%>/bwb_1/null_w.bin",
        dut0.mem_weight<%=k%>.mem,
        <%=($fsize**2)*(1*($n_f1/$core)+j)%>,
        <%=($fsize**2)*(1*($n_f1/$core)+j+1)-1%>
      );
      <%-       end -%>
      <%-     end -%>
      <%-   end -%>
      <%- end -%>

      <%- for i in 0...$n_f2/$core -%>
      <%-   for j in 0...$n_f1 -%>
      <%-     for k in 0...$core -%>
      $readmemb(
        "<%=weight%>/bwb_2/data<%=$core*i+k%>_<%=j%>.bin",
        dut0.mem_weight<%=k%>.mem,
        <%=($fsize**2)*($n_f1*i+j)%> + <%=offset%>,
        <%=($fsize**2)*($n_f1*i+j+1)-1%> + <%=offset%>
      );
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
      <%- if $n_f2 % $core != 0 -%>
      <%-   for j in 0...$n_f1 -%>
      <%-     for k in 0...$core -%>
      <%-       if ($n_f2 - ($n_f2 % $core) + k) < $n_f2 -%>
      $readmemb(
        "<%=weight%>/bwb_2/data<%=$n_f2-($n_f2%$core)+k%>_<%=j%>.bin",
        dut0.mem_weight<%=k%>.mem,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j)%> + <%=offset%>,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j+1)-1%> + <%=offset%>
      );
      <%-       else -%>
      $readmemb(
        "<%=weight%>/bwb_2/null_w.bin",
        dut0.mem_weight<%=k%>.mem,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j)%> + <%=offset%>,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j+1)-1%> + <%=offset%>
      );
      <%-       end -%>
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
    end // }}}
  endtask

  task read_weight_hashed;
    integer i;
    begin // {{{
      $readmemb("<%=weight%>/bhash/conv2_hashW.bin", mem_wh);
      <%- for i in 0...$n_f2/$core -%>
      <%-   for k in 0...$core -%>
      <%-     for j in 0...$n_f1 -%>
      for (i = 0; i < <%=$fsize%>; i=i+1)
        dut0.mem_weight<%=k%>.mem[i+<%=$fsize*($n_f1*i+j)%>]
          = mem_wh[i+<%=$fsize*($n_f1*($core*i+k)+j)%>];
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
      <%- if $n_f2 % $core != 0 -%>
      <%-   for k in 0...$core -%>
      <%-     for j in 0...$n_f1 -%>
      <%-       if ($n_f2 - ($n_f2 % $core) + k) < $n_f2 -%>
      for (i = 0; i < <%=$fsize%>; i=i+1)
        dut0.mem_weight<%=k%>.mem[i+<%=$fsize*($n_f1*($n_f2/$core)+j)%>]
          = mem_wh[i+<%=$fsize*($n_f1*($core*($n_f2/$core)+k)+j)%>];
      <%-       else -%>
      for (i = 0; i < <%=$fsize%>; i=i+1)
        dut0.mem_weight<%=k%>.mem[i+<%=$fsize*($n_f1*($n_f2/$core)+j)%>]
          = 0;
      <%-       end -%>
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
    end // }}}
  endtask

  task read_hash_direct;
    begin // {{{
      <%- for i in 0...$n_f2/$core -%>
      <%-   for j in 0...$n_f1 -%>
      <%-     for k in 0...$core -%>
      $readmemb(
        "<%=weight%>/xi_idx/conv2_joinW_<%=$core*i+k%>_<%=j%>.bin",
        dut0.lut_hash<%=k%>.mem,
        <%=($fsize**2)*($n_f1*i+j)%>,
        <%=($fsize**2)*($n_f1*i+j+1)-1%>
      );
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
      <%- if $n_f2 % $core != 0 -%>
      <%-   for j in 0...$n_f1 -%>
      <%-     for k in 0...$core -%>
      <%-       if ($n_f2 - ($n_f2 % $core) + k) < $n_f2 -%>
      $readmemb(
        "<%=weight%>/xi_idx/conv2_joinW_<%=$n_f2-($n_f2%$core)+k%>_<%=j%>.bin",
        dut0.lut_hash<%=k%>.mem,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j)%> + <%=offset%>,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j+1)-1%> + <%=offset%>
      );
      <%-       else -%>
      $readmemb(
        "<%=weight%>/xi_idx/conv2_nullW.bin",
        dut0.lut_hash<%=k%>.mem,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j)%> + <%=offset%>,
        <%=($fsize**2)*($n_f1*($n_f2/$core)+j+1)-1%> + <%=offset%>
      );
      <%-       end -%>
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
    end // }}}
  endtask

  task read_bias;
    begin // {{{
      <%- for i in 0...$n_f2/$core -%>
      <%-   for j in 0...$core -%>
      $readmemb(
        "<%=weight%>/bwb_2/data<%=$core*i+j%>.bin",
        mem_b<%=j%>,
        <%=i%>, <%=i%>
      );
      <%-   end -%>
      <%- end -%>
      <%- if $n_f2 % $core != 0 -%>
      <%-   for j in 0...$core -%>
      <%-     if ($n_f2 - ($n_f2 % $core) + j) < $n_f2 -%>
      $readmemb(
        "<%=weight%>/bwb_2/data<%=$n_f2-($n_f2%$core)+j%>.bin",
        mem_b<%=j%>,
        <%=($n_f2/$core)%>, <%=($n_f2/$core)%>
      );
      <%-     else -%>
      $readmemb(
        "<%=weight%>/bwb_2/null_b.bin",
        mem_b<%=j%>,
        <%=($n_f2/$core)%>, <%=($n_f2/$core)%>
      );
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
    end // }}}
  endtask

  task read_bias_direct;
    begin // {{{
      <%- for i in 0...$n_f2/$core -%>
      <%-   for j in 0...$core -%>
      $readmemb(
        "<%=weight%>/bwb_2/data<%=$core*i+j%>.bin",
        dut0.mem_bias<%=j%>.mem,
        <%=i%>, <%=i%>
      );
      <%-   end -%>
      <%- end -%>
      <%- if $n_f2 % $core != 0 -%>
      <%-   for j in 0...$core -%>
      <%-     if ($n_f2 - ($n_f2 % $core) + j) < $n_f2 -%>
      $readmemb(
        "<%=weight%>/bwb_2/data<%=$n_f2-($n_f2%$core)+j%>.bin",
        dut0.mem_bias<%=j%>.mem,
        <%=($n_f2/$core)%>, <%=($n_f2/$core)%>
      );
      <%-     else -%>
      $readmemb(
        "<%=weight%>/bwb_2/null_b.bin",
        dut0.mem_bias<%=j%>.mem,
        <%=($n_f2/$core)%>, <%=($n_f2/$core)%>
      );
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
    end // }}}
  endtask

  task write_output;
    integer fd;
    integer i;
    integer out_size;
    integer o_unit;
    integer o_offset;
    integer o_index;
    begin // {{{
      fd = $fopen("test_top_hash.dat", "w");
      out_size = 800;
      o_unit = 16;
      for (i=0; i<out_size; i=i+1)
      begin
        o_offset = i % o_unit;
        o_index  = i / o_unit;
        if (o_offset == 0)
          output_re = o_index % <%=$core%> + 1;
        output_addr = o_offset + o_unit*(o_index/<%=$core%>);
        #(STEP*2);
        $fdisplay(fd, "%0d", read_output);
      end
      output_addr = 0;
      output_re   = 0;
      #(STEP);
      $fclose(fd);
    end // }}}
  endtask

  task valid_memin;
    integer i;
    integer in_size;
    begin // {{{
      in_size = 2880;
      for (i = 0; i < in_size; i = i + 1)
      begin
        #(STEP);
        input_addr = i;
        #(STEP);
        if (dut0.read_input != mem_in[i])
          $display("Fail: %d", i);
      end
      $display("valid_memin complete.");
    end // }}}
  endtask

  task valid_memw;
    integer i;
    integer w_size;
    begin // {{{
      w_size = 50*20*5*5;
      <%- $core.times do |i| -%>
      for (i = 0; i < w_size; i = i + 1)
      begin
        #(STEP);
        weight_addr = i;
        #(STEP);
        if (dut0.read_weight<%=i%> != mem_w<%=i%>[i])
          $display("Fail: %d", i);
      end
      <%- end -%>
      $display("valid_memw complete.");
    end // }}}
  endtask

  always
  begin
    #(STEP/2-1);
    $display(
      "%5d: ", $time/STEP, // {{{
      "%d ",   xrst,
      "%d ",   req,
      "%d ",   ack,
      "%d ",   dut0.ctrl.ctrl_core.r_state,
      "| ",
      "%d ",  dut0.ctrl.ctrl_core.out_begin,
      "%d ",  dut0.ctrl.ctrl_core.out_valid,
      "%d: ", dut0.ctrl.ctrl_core.out_end,
      "%2d ", dut0.ctrl.ctrl_core.r_count_out,
      "%2d ", dut0.ctrl.ctrl_core.r_count_in,
      "%2d ", dut0.ctrl.ctrl_core.r_input_x,
      "%2d ", dut0.ctrl.ctrl_core.r_input_y,
      "%2d ", dut0.ctrl.ctrl_core.r_weight_x,
      "%2d ", dut0.ctrl.ctrl_core.r_weight_y,
      "%d ",  dut0.ctrl.ctrl_core.r_state_weight,
      "| ",
      "%d ",  dut0.ctrl.ctrl_conv.out_begin,
      "%d ",  dut0.ctrl.ctrl_conv.out_valid,
      "%d: ", dut0.ctrl.ctrl_conv.out_end,
      "%d ",  dut0.core0.fmap,
      "| ",
      "%d ",  dut0.ctrl.ctrl_bias.out_begin,
      "%d ",  dut0.ctrl.ctrl_bias.out_valid,
      "%d: ", dut0.ctrl.ctrl_bias.out_end,
      "%d ",  dut0.core0.biased,
      "| ",
      "%d ",  dut0.ctrl.ctrl_relu.out_begin,
      "%d ",  dut0.ctrl.ctrl_relu.out_valid,
      "%d: ", dut0.ctrl.ctrl_relu.out_end,
      "%d ",  dut0.core0.actived,
      "| ",
      "%d ",  dut0.ctrl.ctrl_pool.out_begin,
      "%d ",  dut0.ctrl.ctrl_pool.out_valid,
      "%d: ", dut0.ctrl.ctrl_pool.out_end,
      "%d ",  dut0.core0.pmap,
      "|" // }}}
    );
    // focus ctrl
    // $display(
    //   "%5d: ", $time/STEP, // {{{
    //   "%d ",   xrst,
    //   "%d ",   req,
    //   "%d ",   ack,
    //   "%d ", dut0.ctrl.ctrl_core.r_state_d[dut0.ctrl.ctrl_core.r_d_pixelbuf],
    //   "| ",
    //   "%d ", dut0.ctrl.ctrl_core.r_state,
    //   "%d ", dut0.ctrl.ctrl_core.r_state_weight,
    //   "%3d ", dut0.ctrl.ctrl_core.r_count_out,
    //   "%3d ", dut0.ctrl.ctrl_core.r_count_in,
    //   "%3d ", dut0.ctrl.ctrl_core.r_weight,
    //   "%3d ", dut0.ctrl.ctrl_core.r_input_x,
    //   "%3d ", dut0.ctrl.ctrl_core.r_input_y,
    //   "|conv: ",
    //   "%d ", dut0.ctrl.ctrl_conv.conv_valid,
    //   "%b ", dut0.core0.conv.r_sel0,
    //   "%4d ", dut0.core0.conv.weight0,
    //   "%4d ", dut0.core0.conv.pixel0,
    //   "%4d ", dut0.core0.conv.fmap,
    //   "; ",
    //   "%4d ", dut0.core0.conv.hashed_weight0,
    //   "%4d ", dut0.core0.conv.hashed_weight1,
    //   "%4d ", dut0.core0.conv.hashed_weight2,
    //   "%4d ", dut0.core0.conv.hashed_weight3,
    //   "%4d ", dut0.core0.conv.hashed_weight4,
    //   "|" // }}}
    // );
    #(STEP/2+1);
  end

endmodule
