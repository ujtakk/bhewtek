module core(/*AUTOARG*/);
`include "parameters.vh"
<%- load "parameters.rb" -%>

    /*AUTOINPUT*/

    /*AUTOOUTPUT*/

    /*AUTOWIRE*/

    /*AUTOREG*/

    // AUTO_CONSTANT (DWIDTH)

    /* conv AUTO_TEMPLATE (
        .fmap      (result[DWIDTH-1:0]),
        .wreg_we   (wreg_we),
        .read_data (read_weight[DWIDTH-1:0]),
    ); */
    conv conv(/*AUTOINST*/);

    /* sram_feat AUTO_TEMPLATE (
        //.read_data1  ({DWIDTH{1'b0}}),
        .read_data1  (),
        .write_data1 (write_feat[DWIDTH-1:0]),
        .mem_we1     (mem_feat_we),
        .mem_addr1   (mem_feat_addr_d1[FACCUM-1:0]),
        .read_data2  (read_feat[DWIDTH-1:0]),
        .write_data2 ({DWIDTH{1'b0}}),
        .mem_we2     (1'b0),
        .mem_addr2   (mem_feat_addr[FACCUM-1:0]),
    ); */
    sram_feat mem_feat(/*AUTOINST*/);

    /* accumulator AUTO_TEMPLATE (
        .total   (fmap[DWIDTH-1:0]),
        .result  (result[DWIDTH-1:0]),
        .o_we    (conv_we),
        .reset   (mem_feat_rst),
        .sum_old (read_feat[DWIDTH-1:0]),
        .sum_wb  (write_feat[DWIDTH-1:0]),
    ); */
    accumulator feat_accum(/*AUTOINST*/);

    /* linebuf_feat AUTO_TEMPLATE (
        <%- for i in 0...$psize**2 -%>
        .pixel_feat<%=i%> (pixel_feat<%=i%>[DWIDTH-1:0]),
        <%- end -%>
        .read_data        (fmap[DWIDTH-1:0]),
    ); */
    linebuf_feat buf_feat(/*AUTOINST*/);

    /* pool AUTO_TEMPLATE (
        .pmap             (pmap[DWIDTH-1:0]),
        .o_we             (pool_we),
        <%- for i in 0...$psize**2 -%>
        .pixel_feat<%=i%> (pixel_feat<%=i%>[DWIDTH-1:0]),
        <%- end -%>
    ); */
    pool pool(/*AUTOINST*/);

endmodule
