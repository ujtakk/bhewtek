module xxhash32(/*AUTOARG*/);
//`include "parameters.vh"

  parameter DWIDTH = 32;

  parameter PRIME32_1 = 2654435761; /* U32 */
  parameter PRIME32_2 = 2246822519; /* U32 */
  parameter PRIME32_3 = 3266489917; /* U32 */
  parameter PRIME32_4 =  668265263; /* U32 */
  parameter PRIME32_5 =  374761393; /* U32 */

  /*AUTOINPUT*/
  input clk;
  input xrst;
  input [7:0] query;
  input [31:0] seed;
  input [31:0] len;

  /*AUTOOUTPUT*/
  output [31:0] code;

  /*AUTOWIRE*/
  <%- for i in 0...0 -%>
  wire [31:0] h32_s<%=i%>;
  <%- end -%>

  /*AUTOREG*/

  //#define XXH_rotl32(x,r) ((x << r) | (x >> (32 - r)))

  //static U32 XXH32_round(U32 seed, U32 input)
  //{
  //  seed += input * PRIME32_2;
  //  seed  = XXH_rotl32(seed, 13);
  //  seed *= PRIME32_1;
  //  return seed;
  //}

  //const BYTE* p = (const BYTE*)input;
  always @(posedge clk or negedge xrst)
    if (!xrst)
      p <= 0;
    else if ()
      p <= query;
    else if (p <= limit)
      p <= p+16;

  //const BYTE* bEnd = p + len;
  assign bEnd = p + len;
  //U32 h32;

  //if (len>=16) {
  //  const BYTE* const limit = bEnd - 16;
  assign limit = bEnd - 16;
  //  U32 v1 = seed + PRIME32_1 + PRIME32_2;
  assign v1 = seed + PRIME32_1 + PRIME32_2;
  //  U32 v2 = seed + PRIME32_2;
  assign v2 = seed + PRIME32_2;
  //  U32 v3 = seed + 0;
  assign v3 = seed + 0;
  //  U32 v4 = seed - PRIME32_1;
  assign v4 = seed - PRIME32_1;

  //  do {
  //    v1 = XXH32_round(v1, XXH_get32bits(p)); p+=4;
  //    v2 = XXH32_round(v2, XXH_get32bits(p)); p+=4;
  //    v3 = XXH32_round(v3, XXH_get32bits(p)); p+=4;
  //    v4 = XXH32_round(v4, XXH_get32bits(p)); p+=4;
  //  } while (p<=limit);

  XXH32_round round0(v1, p   , v1_o);
  XXH32_round round1(v2, p+4 , v2_o);
  XXH32_round round2(v3, p+8 , v3_o);
  XXH32_round round3(v4, p+12, v4_o);

  always @(posedge clk or negedge xrst)
    if (!xrst)
    begin
      v1 <= 0;
      v2 <= 0;
      v3 <= 0;
      v4 <= 0;
    end
    else if (p <= limit)
    begin
      v1 <= v1_o;
      v2 <= v2_o;
      v3 <= v3_o;
      v4 <= v4_o;
    end
    else
    begin
      v1 <= 0;
      v2 <= 0;
      v3 <= 0;
      v4 <= 0;
    end

  //  h32 = XXH_rotl32(v1, 1) + XXH_rotl32(v2, 7) + XXH_rotl32(v3, 12) + XXH_rotl32(v4, 18);
  XXH_rotl32 #(1)  rotl0(v1, h32_s);
  XXH_rotl32 #(7)  rotl1(v2, h32_s);
  XXH_rotl32 #(12) rotl2(v3, h32_s);
  XXH_rotl32 #(18) rotl3(v4, h32_s);

  assign h32_s = h32_s + h32_s;
  assign h32_s = h32_s + h32_s;
  assign h32_s = h32_s + h32_s;

  //} else {
  //  h32  = seed + PRIME32_5;
  //}
  assign h32_s = seed + PRIME32_5;

  assign h32_s = ? h32_s : h32_s;

  //h32 += (U32) len;
  assign h32_s = h32_s + len;

  //while (p+4<=bEnd) {
  //  h32 += XXH_get32bits(p) * PRIME32_3;
  //  h32  = XXH_rotl32(h32, 17) * PRIME32_4 ;
  //  p+=4;
  //}
  always @(posedge clk or negedge xrst)
    if (!xrst)
      h32_s <= 0;
    else if (p+4 <= bEnd)
      h32_s <= h32_s + 
  //while (p<bEnd) {
  //  h32 += (*p) * PRIME32_5;
  //  h32 = XXH_rotl32(h32, 11) * PRIME32_1 ;
  //  p++;
  //}
  always @(posedge clk or negedge xrst)
    if (!xrst)
    else

  //h32 ^= h32 >> 15;
  assign h32_s = h32_s[31:15];
  //h32 *= PRIME32_2;
  assign h32_s = h32_s * PRIME32_2;
  //h32 ^= h32 >> 13;
  assign h32_s = h32_s[31:13];
  //h32 *= PRIME32_3;
  assign h32_s = h32_s * PRIME32_3;
  //h32 ^= h32 >> 16;
  assign h32_s = h32_s[31:16];

  //return h32;
  assign code = h32_s;

endmodule
