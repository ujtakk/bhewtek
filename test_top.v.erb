`timescale 10ps/1ps

module test_top();
`include "parameters.vh"

    /*AUTOREGINPUT*/

    /*AUTOWIRE*/

    //clock
    always
    begin
        clk = 0;
        #(STEP/2);
        clk = 1;
        #(STEP/2);
    end

    reg [DWIDTH-1:0] mem_in [2**INSIZE-1:0];
    <% for i in 0..3 %>
    integer fcnt<%=i%>;
    reg [DWIDTH-1:0] mem_w<%=i%> [2**WSIZE-1:0];
    <% end %>

    integer mem_input_cnt;
    integer mem_weight_cnt;
    integer fp;
    integer i;
    initial
    begin
        mem_input_cnt = 0;
        mem_weight_cnt = 0;
        <% for i in 0..3 %>
        fcnt<%=i%> = 0;
        <% end %>

        //fp = $fopen("core_log.txt");

        xrst = 0;
        input_addr = 0;
        write_input = 0;
        mem_input_we = 0;
        <% for n in 0..3 %>
        mem_weight_we<%=n%> = 0;
        weight_addr<%=n%> = 0;
        write_weight<%=n%> = 0;
        <% end %>
        #(STEP);
        xrst = 1;

        read_input;
        mem_input_we = 1;
        for (i=0;i<2**INSIZE;i=i+1)
        begin
            input_addr = i;
            write_input = mem_in[i];
            #(STEP);
        end
        mem_input_we = 0;
        input_addr = 0;

        read_weight;
        <% for n in 0..3 %>
        mem_weight_we<%=n%> = 1;
        for (i=0;i<2**WSIZE;i=i+1)
        begin
            weight_addr<%=n%> = i;
            write_weight<%=n%> = mem_w<%=n%>[i];
            #(STEP);
        end
        mem_weight_we<%=n%> = 0;
        weight_addr<%=n%> = 0;
        <% end %>

        //$toggle_start();
        //$vcdpluson;
        #(STEP);

        xrst = 0;
        req = 0;
        fil_h = 5;
        fil_w = 5;
        img_h = 12;
        img_w = 12;
        n_in = 20;
        n_out = 50;
        in_addr = 0;
        w_addr = 0;
        mem_input_we = 0;
        write_input = 0;
        /* <% for i in 0..3 %> */
        mem_weight_we<%=i%> = 0;
        write_weight<%=i%> = 0;
        /* <% end %> */

        #(STEP);

        xrst = 1;

        #(STEP*5);

        req = 1;

        #(STEP);

        req = 0;

        #(STEP*43950);
        //$toggle_stop();

        $display("input: %d     weight: %d", mem_input_cnt, mem_weight_cnt);
        $display("fcnt: %d %d %d %d", fcnt0, fcnt1, fcnt2, fcnt3);
        //$toggle_report("test_core.saif", "10ps", "dut0");
        //$vcdplusoff;
        $finish();
    end

    reg pool_we_d1;

    always @(posedge clk)
        pool_we_d1 <= dut0.pool_we0;

    always @(dut0.mem_input_addr)
        mem_input_cnt = mem_input_cnt + 1;

    always @(dut0.mem_weight_addr0)
        mem_weight_cnt = mem_weight_cnt + 1;

    always
    begin
        #(STEP/2-1);
        if (pool_we_d1)
            $display("%d: %d %d %d %d", $time/STEP, $signed(dut0.pmap0), $signed(dut0.pmap1), $signed(dut0.pmap2), $signed(dut0.pmap3));

        <% for i in 0..3 %>
        if (dut0.mem_feat_we<%=i%>)
            fcnt<%=i%> = fcnt<%=i%> + 1;
        <% end %>
        #(STEP/2+1);
    end

//        $fdisplay(fp,
//            "%5d: ", $time/STEP,
//            "%d ", xrst,
//            "%d ", req,
//            "%d ", $signed(dut0.pmap0),
//            "%d ", $signed(dut0.pmap1),
//            "%d ", $signed(dut0.pmap2),
//            "%d ", $signed(dut0.pmap3),
//            "%d ", ack,
//            "%d ", dut0.mem_output_we0,
//            "%d ", dut0.mem_output_addr0,
//            "| ",
//            "%d ", dut0.mem_input_addr,
//            "%d ", dut0.input_addr,
//            "%d ", dut0.mem_weight_addr0,
//            "%d ", dut0.weight_addr0,
//            "%d ", dut0.wreg_we0,
//            "%d ", dut0.conv_we0,
//            "%d ", dut0.pool_we0,
//            "| ",
//            "%d ", dut0.mem_feat_we0,
//            "%d ", dut0.mem_feat_rst0,
//            "%d ", dut0.mem_feat_addr0,
//            "%d ", dut0.mem_feat_addr0_d1,
//            "%d ", $signed(dut0.result0),
//            "%d ", $signed(dut0.read_feat0),
//            "%d ", $signed(dut0.write_feat0),
//            //"-*- ",
//            //"%4d ", $signed(dut0.mem_feat0.mem[0]),
//            //"%4d ", $signed(dut0.mem_feat0.mem[1]),
//            //"%4d ", $signed(dut0.mem_feat0.mem[2]),
//            //"%4d ", $signed(dut0.mem_feat0.mem[3]),
//            //"%4d ", $signed(dut0.mem_feat0.mem[4]),
//            //"%4d ", $signed(dut0.mem_feat0.mem[5]),
//            //"%4d ", $signed(dut0.mem_feat0.mem[6]),
//            //"%4d ", $signed(dut0.mem_feat0.mem[7]),
//            //"-*- ",
//            "| ",
//            "%d ", dut0.ctrl.r_state,
//            "%d ", dut0.ctrl.r_c_in,
//            "%d ", dut0.ctrl.r_c_out,
//            "| ",
//            "%d ", dut0.ctrl.r_w_x,
//            "%d ", dut0.ctrl.r_w_y,
//            //"%d ", dut0.ctrl.wreg_start,
//            "%d ", dut0.ctrl.wreg_valid,
//            //"%d ", dut0.ctrl.wreg_end,
//            "; ",
//            "%d ", dut0.ctrl.r_x,
//            "%d ", dut0.ctrl.r_y,
//            "%d ", dut0.ctrl.conv_start,
//            "%d ", dut0.ctrl.conv_valid,
//            "%d ", dut0.ctrl.conv_end,
//            "; ",
//            "%d ", dut0.ctrl.r_p_x,
//            "%d ", dut0.ctrl.r_p_y,
//            //"%d ", dut0.ctrl.pool_start,
//            "%d ", dut0.ctrl.pool_valid,
//            //"%d ", dut0.ctrl.pool_end,
//            <% for i in 0..3 %>
//            "%d ", $signed(dut0.pixel_feat<%=i%>_0),
//            <% end %>
//        );
//        #(STEP/2+1);
//    end

    top dut0(/*AUTOINST*/);

    task read_input;
        begin
            //<% num = 0 %><% file = 1 %>
            //<% for i in 0..19 %>
            $readmemb("/home/work/takau/lazy_core/data/bpmap1/<%=num%>/data<%=file%>_<%=i%>.bin", mem_in, <%=144*i%>, <%=144*(i+1)-1%>);
            //<% end %>
        end
    endtask

    task read_weight;
        begin
            //<% for i in 0..11 %>
            //<%   for j in 0..19 %>
            //<%     for k in 0..3 %>
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data<%=4*i+k%>_<%=j%>.bin", mem_w<%=k%>, <%=25*(20*i+j)%>, <%=25*(20*i+j+1)-1%>);
            //<%     end %>
            //<%   end %>
            //<% end %>
            //<% for j in 0..19 %>
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data48_<%=j%>.bin", mem_w0, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/data49_<%=j%>.bin", mem_w1, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/null.bin", mem_w2, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            $readmemb("/home/work/takau/lazy_core/data/weight/bwb_2/null.bin", mem_w3, <%=25*(240+j)%>, <%=25*(241+j)-1%>);
            //<% end %>
        end
    endtask

endmodule
